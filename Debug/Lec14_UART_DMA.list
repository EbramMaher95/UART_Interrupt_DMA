
Lec14_UART_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a78  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08002b84  08002b84  00003b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002bf0  08002bf0  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002bf0  08002bf0  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002bf0  08002bf0  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002bf0  08002bf0  00003bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002bf4  08002bf4  00003bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002bf8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  2000000c  08002c04  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  08002c04  0000414c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000790b  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000161d  00000000  00000000  0000b940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c0  00000000  00000000  0000cf60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000052b  00000000  00000000  0000d620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015f26  00000000  00000000  0000db4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000084b3  00000000  00000000  00023a71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e777  00000000  00000000  0002bf24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000aa69b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a50  00000000  00000000  000aa6e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000ac130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002b6c 	.word	0x08002b6c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002b6c 	.word	0x08002b6c

0800014c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN 1 */

	//enable the clock for Port C
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000152:	4b21      	ldr	r3, [pc, #132]	@ (80001d8 <main+0x8c>)
 8000154:	699b      	ldr	r3, [r3, #24]
 8000156:	4a20      	ldr	r2, [pc, #128]	@ (80001d8 <main+0x8c>)
 8000158:	f043 0310 	orr.w	r3, r3, #16
 800015c:	6193      	str	r3, [r2, #24]
 800015e:	4b1e      	ldr	r3, [pc, #120]	@ (80001d8 <main+0x8c>)
 8000160:	699b      	ldr	r3, [r3, #24]
 8000162:	f003 0310 	and.w	r3, r3, #16
 8000166:	607b      	str	r3, [r7, #4]
 8000168:	687b      	ldr	r3, [r7, #4]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800016a:	f000 fa2f 	bl	80005cc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800016e:	f000 f83f 	bl	80001f0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000172:	f000 f8cb 	bl	800030c <MX_GPIO_Init>
	MX_DMA_Init();
 8000176:	f000 f8ab 	bl	80002d0 <MX_DMA_Init>
	MX_USART1_UART_Init();
 800017a:	f000 f87f 	bl	800027c <MX_USART1_UART_Init>
	//register callback for the UART module
	//HAL_UART_RegisterCallback(&huart1, HAL_UART_RX_COMPLETE_CB_ID,on_data_received);

	//the RxEvent pointer is pointing to the RxEvnet (the function (function callback) i created)
	//so once it is triggered, it points to the function -> execute this function -> linked together
	huart1.RxEventCallback = RxEvent;
 800017e:	4b17      	ldr	r3, [pc, #92]	@ (80001dc <main+0x90>)
 8000180:	4a17      	ldr	r2, [pc, #92]	@ (80001e0 <main+0x94>)
 8000182:	66da      	str	r2, [r3, #108]	@ 0x6c

	//asking the user to enter his name
	HAL_UART_Transmit(&huart1, (uint8_t*) "Enter your name\r\n", 18, 100);
 8000184:	2364      	movs	r3, #100	@ 0x64
 8000186:	2212      	movs	r2, #18
 8000188:	4916      	ldr	r1, [pc, #88]	@ (80001e4 <main+0x98>)
 800018a:	4814      	ldr	r0, [pc, #80]	@ (80001dc <main+0x90>)
 800018c:	f001 fc60 	bl	8001a50 <HAL_UART_Transmit>

	//enable the Receive mode in interrupt mode to initialize the interrupt once data is received
	//data will be received in the string str and it will receive only one byte
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t*) &str, 1);
 8000190:	2201      	movs	r2, #1
 8000192:	4915      	ldr	r1, [pc, #84]	@ (80001e8 <main+0x9c>)
 8000194:	4811      	ldr	r0, [pc, #68]	@ (80001dc <main+0x90>)
 8000196:	f001 fcde 	bl	8001b56 <HAL_UARTEx_ReceiveToIdle_DMA>

	//set pin 13 on port C as output (connected to LED on the board)
	GPIO_InitTypeDef PC13 = { .Pin = GPIO_PIN_13, .Mode = GPIO_MODE_OUTPUT_PP,
 800019a:	f107 0308 	add.w	r3, r7, #8
 800019e:	2200      	movs	r2, #0
 80001a0:	601a      	str	r2, [r3, #0]
 80001a2:	605a      	str	r2, [r3, #4]
 80001a4:	609a      	str	r2, [r3, #8]
 80001a6:	60da      	str	r2, [r3, #12]
 80001a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80001ac:	60bb      	str	r3, [r7, #8]
 80001ae:	2301      	movs	r3, #1
 80001b0:	60fb      	str	r3, [r7, #12]
 80001b2:	2303      	movs	r3, #3
 80001b4:	617b      	str	r3, [r7, #20]
			.Speed = GPIO_SPEED_FREQ_HIGH,

	};

	//initialize PIN 13 on PORT C
	HAL_GPIO_Init(GPIOC, &PC13);
 80001b6:	f107 0308 	add.w	r3, r7, #8
 80001ba:	4619      	mov	r1, r3
 80001bc:	480b      	ldr	r0, [pc, #44]	@ (80001ec <main+0xa0>)
 80001be:	f000 fe3b 	bl	8000e38 <HAL_GPIO_Init>
	/* USER CODE BEGIN WHILE */
	while (1) //on the while loop pin is toggled every 500 ms and when data is received interrupt is enabled
	{

		//toggle the pin
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80001c2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001c6:	4809      	ldr	r0, [pc, #36]	@ (80001ec <main+0xa0>)
 80001c8:	f000 ffba 	bl	8001140 <HAL_GPIO_TogglePin>

		//delay for 500 ms
		HAL_Delay(500);
 80001cc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80001d0:	f000 fa5e 	bl	8000690 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80001d4:	bf00      	nop
 80001d6:	e7f4      	b.n	80001c2 <main+0x76>
 80001d8:	40021000 	.word	0x40021000
 80001dc:	20000028 	.word	0x20000028
 80001e0:	08000351 	.word	0x08000351
 80001e4:	08002b84 	.word	0x08002b84
 80001e8:	200000e4 	.word	0x200000e4
 80001ec:	40011000 	.word	0x40011000

080001f0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b090      	sub	sp, #64	@ 0x40
 80001f4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80001f6:	f107 0318 	add.w	r3, r7, #24
 80001fa:	2228      	movs	r2, #40	@ 0x28
 80001fc:	2100      	movs	r1, #0
 80001fe:	4618      	mov	r0, r3
 8000200:	f002 fc88 	bl	8002b14 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000204:	1d3b      	adds	r3, r7, #4
 8000206:	2200      	movs	r2, #0
 8000208:	601a      	str	r2, [r3, #0]
 800020a:	605a      	str	r2, [r3, #4]
 800020c:	609a      	str	r2, [r3, #8]
 800020e:	60da      	str	r2, [r3, #12]
 8000210:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000212:	2301      	movs	r3, #1
 8000214:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000216:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800021a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800021c:	2300      	movs	r3, #0
 800021e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000220:	2301      	movs	r3, #1
 8000222:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000224:	2302      	movs	r3, #2
 8000226:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000228:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800022c:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800022e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000232:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000234:	f107 0318 	add.w	r3, r7, #24
 8000238:	4618      	mov	r0, r3
 800023a:	f000 ff9b 	bl	8001174 <HAL_RCC_OscConfig>
 800023e:	4603      	mov	r3, r0
 8000240:	2b00      	cmp	r3, #0
 8000242:	d001      	beq.n	8000248 <SystemClock_Config+0x58>
		Error_Handler();
 8000244:	f000 f8a0 	bl	8000388 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000248:	230f      	movs	r3, #15
 800024a:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800024c:	2302      	movs	r3, #2
 800024e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000250:	2300      	movs	r3, #0
 8000252:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000254:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000258:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800025a:	2300      	movs	r3, #0
 800025c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800025e:	1d3b      	adds	r3, r7, #4
 8000260:	2102      	movs	r1, #2
 8000262:	4618      	mov	r0, r3
 8000264:	f001 fa08 	bl	8001678 <HAL_RCC_ClockConfig>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d001      	beq.n	8000272 <SystemClock_Config+0x82>
		Error_Handler();
 800026e:	f000 f88b 	bl	8000388 <Error_Handler>
	}
}
 8000272:	bf00      	nop
 8000274:	3740      	adds	r7, #64	@ 0x40
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}
	...

0800027c <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 800027c:	b580      	push	{r7, lr}
 800027e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000280:	4b11      	ldr	r3, [pc, #68]	@ (80002c8 <MX_USART1_UART_Init+0x4c>)
 8000282:	4a12      	ldr	r2, [pc, #72]	@ (80002cc <MX_USART1_UART_Init+0x50>)
 8000284:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000286:	4b10      	ldr	r3, [pc, #64]	@ (80002c8 <MX_USART1_UART_Init+0x4c>)
 8000288:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800028c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800028e:	4b0e      	ldr	r3, [pc, #56]	@ (80002c8 <MX_USART1_UART_Init+0x4c>)
 8000290:	2200      	movs	r2, #0
 8000292:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000294:	4b0c      	ldr	r3, [pc, #48]	@ (80002c8 <MX_USART1_UART_Init+0x4c>)
 8000296:	2200      	movs	r2, #0
 8000298:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800029a:	4b0b      	ldr	r3, [pc, #44]	@ (80002c8 <MX_USART1_UART_Init+0x4c>)
 800029c:	2200      	movs	r2, #0
 800029e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80002a0:	4b09      	ldr	r3, [pc, #36]	@ (80002c8 <MX_USART1_UART_Init+0x4c>)
 80002a2:	220c      	movs	r2, #12
 80002a4:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002a6:	4b08      	ldr	r3, [pc, #32]	@ (80002c8 <MX_USART1_UART_Init+0x4c>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002ac:	4b06      	ldr	r3, [pc, #24]	@ (80002c8 <MX_USART1_UART_Init+0x4c>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80002b2:	4805      	ldr	r0, [pc, #20]	@ (80002c8 <MX_USART1_UART_Init+0x4c>)
 80002b4:	f001 fb6e 	bl	8001994 <HAL_UART_Init>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d001      	beq.n	80002c2 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 80002be:	f000 f863 	bl	8000388 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80002c2:	bf00      	nop
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	20000028 	.word	0x20000028
 80002cc:	40013800 	.word	0x40013800

080002d0 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b082      	sub	sp, #8
 80002d4:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80002d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000308 <MX_DMA_Init+0x38>)
 80002d8:	695b      	ldr	r3, [r3, #20]
 80002da:	4a0b      	ldr	r2, [pc, #44]	@ (8000308 <MX_DMA_Init+0x38>)
 80002dc:	f043 0301 	orr.w	r3, r3, #1
 80002e0:	6153      	str	r3, [r2, #20]
 80002e2:	4b09      	ldr	r3, [pc, #36]	@ (8000308 <MX_DMA_Init+0x38>)
 80002e4:	695b      	ldr	r3, [r3, #20]
 80002e6:	f003 0301 	and.w	r3, r3, #1
 80002ea:	607b      	str	r3, [r7, #4]
 80002ec:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80002ee:	2200      	movs	r2, #0
 80002f0:	2100      	movs	r1, #0
 80002f2:	200f      	movs	r0, #15
 80002f4:	f000 fac7 	bl	8000886 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80002f8:	200f      	movs	r0, #15
 80002fa:	f000 fae0 	bl	80008be <HAL_NVIC_EnableIRQ>

}
 80002fe:	bf00      	nop
 8000300:	3708      	adds	r7, #8
 8000302:	46bd      	mov	sp, r7
 8000304:	bd80      	pop	{r7, pc}
 8000306:	bf00      	nop
 8000308:	40021000 	.word	0x40021000

0800030c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800030c:	b480      	push	{r7}
 800030e:	b083      	sub	sp, #12
 8000310:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000312:	4b0e      	ldr	r3, [pc, #56]	@ (800034c <MX_GPIO_Init+0x40>)
 8000314:	699b      	ldr	r3, [r3, #24]
 8000316:	4a0d      	ldr	r2, [pc, #52]	@ (800034c <MX_GPIO_Init+0x40>)
 8000318:	f043 0320 	orr.w	r3, r3, #32
 800031c:	6193      	str	r3, [r2, #24]
 800031e:	4b0b      	ldr	r3, [pc, #44]	@ (800034c <MX_GPIO_Init+0x40>)
 8000320:	699b      	ldr	r3, [r3, #24]
 8000322:	f003 0320 	and.w	r3, r3, #32
 8000326:	607b      	str	r3, [r7, #4]
 8000328:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800032a:	4b08      	ldr	r3, [pc, #32]	@ (800034c <MX_GPIO_Init+0x40>)
 800032c:	699b      	ldr	r3, [r3, #24]
 800032e:	4a07      	ldr	r2, [pc, #28]	@ (800034c <MX_GPIO_Init+0x40>)
 8000330:	f043 0304 	orr.w	r3, r3, #4
 8000334:	6193      	str	r3, [r2, #24]
 8000336:	4b05      	ldr	r3, [pc, #20]	@ (800034c <MX_GPIO_Init+0x40>)
 8000338:	699b      	ldr	r3, [r3, #24]
 800033a:	f003 0304 	and.w	r3, r3, #4
 800033e:	603b      	str	r3, [r7, #0]
 8000340:	683b      	ldr	r3, [r7, #0]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000342:	bf00      	nop
 8000344:	370c      	adds	r7, #12
 8000346:	46bd      	mov	sp, r7
 8000348:	bc80      	pop	{r7}
 800034a:	4770      	bx	lr
 800034c:	40021000 	.word	0x40021000

08000350 <RxEvent>:
;

//function definition
//this function is executed once the stream of data is sent and nothing is received (IDLE)
//the data stream is saved into the string
void RxEvent(UART_HandleTypeDef *huart, uint16_t length) {
 8000350:	b580      	push	{r7, lr}
 8000352:	b082      	sub	sp, #8
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
 8000358:	460b      	mov	r3, r1
 800035a:	807b      	strh	r3, [r7, #2]

	//display the name
	HAL_UART_Transmit(&huart1, (uint8_t*) "\r\nYour name is: ", 16, 100);
 800035c:	2364      	movs	r3, #100	@ 0x64
 800035e:	2210      	movs	r2, #16
 8000360:	4906      	ldr	r1, [pc, #24]	@ (800037c <RxEvent+0x2c>)
 8000362:	4807      	ldr	r0, [pc, #28]	@ (8000380 <RxEvent+0x30>)
 8000364:	f001 fb74 	bl	8001a50 <HAL_UART_Transmit>

	//the length variable is used in this function
	//because it is returned from the string length
	HAL_UART_Transmit(&huart1, (uint8_t*) str, length, 100);
 8000368:	887a      	ldrh	r2, [r7, #2]
 800036a:	2364      	movs	r3, #100	@ 0x64
 800036c:	4905      	ldr	r1, [pc, #20]	@ (8000384 <RxEvent+0x34>)
 800036e:	4804      	ldr	r0, [pc, #16]	@ (8000380 <RxEvent+0x30>)
 8000370:	f001 fb6e 	bl	8001a50 <HAL_UART_Transmit>

}
 8000374:	bf00      	nop
 8000376:	3708      	adds	r7, #8
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}
 800037c:	08002b98 	.word	0x08002b98
 8000380:	20000028 	.word	0x20000028
 8000384:	200000e4 	.word	0x200000e4

08000388 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800038c:	b672      	cpsid	i
}
 800038e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000390:	bf00      	nop
 8000392:	e7fd      	b.n	8000390 <Error_Handler+0x8>

08000394 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000394:	b480      	push	{r7}
 8000396:	b085      	sub	sp, #20
 8000398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800039a:	4b15      	ldr	r3, [pc, #84]	@ (80003f0 <HAL_MspInit+0x5c>)
 800039c:	699b      	ldr	r3, [r3, #24]
 800039e:	4a14      	ldr	r2, [pc, #80]	@ (80003f0 <HAL_MspInit+0x5c>)
 80003a0:	f043 0301 	orr.w	r3, r3, #1
 80003a4:	6193      	str	r3, [r2, #24]
 80003a6:	4b12      	ldr	r3, [pc, #72]	@ (80003f0 <HAL_MspInit+0x5c>)
 80003a8:	699b      	ldr	r3, [r3, #24]
 80003aa:	f003 0301 	and.w	r3, r3, #1
 80003ae:	60bb      	str	r3, [r7, #8]
 80003b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003b2:	4b0f      	ldr	r3, [pc, #60]	@ (80003f0 <HAL_MspInit+0x5c>)
 80003b4:	69db      	ldr	r3, [r3, #28]
 80003b6:	4a0e      	ldr	r2, [pc, #56]	@ (80003f0 <HAL_MspInit+0x5c>)
 80003b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003bc:	61d3      	str	r3, [r2, #28]
 80003be:	4b0c      	ldr	r3, [pc, #48]	@ (80003f0 <HAL_MspInit+0x5c>)
 80003c0:	69db      	ldr	r3, [r3, #28]
 80003c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80003c6:	607b      	str	r3, [r7, #4]
 80003c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003ca:	4b0a      	ldr	r3, [pc, #40]	@ (80003f4 <HAL_MspInit+0x60>)
 80003cc:	685b      	ldr	r3, [r3, #4]
 80003ce:	60fb      	str	r3, [r7, #12]
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80003d6:	60fb      	str	r3, [r7, #12]
 80003d8:	68fb      	ldr	r3, [r7, #12]
 80003da:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80003de:	60fb      	str	r3, [r7, #12]
 80003e0:	4a04      	ldr	r2, [pc, #16]	@ (80003f4 <HAL_MspInit+0x60>)
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003e6:	bf00      	nop
 80003e8:	3714      	adds	r7, #20
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bc80      	pop	{r7}
 80003ee:	4770      	bx	lr
 80003f0:	40021000 	.word	0x40021000
 80003f4:	40010000 	.word	0x40010000

080003f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b088      	sub	sp, #32
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000400:	f107 0310 	add.w	r3, r7, #16
 8000404:	2200      	movs	r2, #0
 8000406:	601a      	str	r2, [r3, #0]
 8000408:	605a      	str	r2, [r3, #4]
 800040a:	609a      	str	r2, [r3, #8]
 800040c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	4a33      	ldr	r2, [pc, #204]	@ (80004e0 <HAL_UART_MspInit+0xe8>)
 8000414:	4293      	cmp	r3, r2
 8000416:	d15f      	bne.n	80004d8 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000418:	4b32      	ldr	r3, [pc, #200]	@ (80004e4 <HAL_UART_MspInit+0xec>)
 800041a:	699b      	ldr	r3, [r3, #24]
 800041c:	4a31      	ldr	r2, [pc, #196]	@ (80004e4 <HAL_UART_MspInit+0xec>)
 800041e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000422:	6193      	str	r3, [r2, #24]
 8000424:	4b2f      	ldr	r3, [pc, #188]	@ (80004e4 <HAL_UART_MspInit+0xec>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800042c:	60fb      	str	r3, [r7, #12]
 800042e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000430:	4b2c      	ldr	r3, [pc, #176]	@ (80004e4 <HAL_UART_MspInit+0xec>)
 8000432:	699b      	ldr	r3, [r3, #24]
 8000434:	4a2b      	ldr	r2, [pc, #172]	@ (80004e4 <HAL_UART_MspInit+0xec>)
 8000436:	f043 0304 	orr.w	r3, r3, #4
 800043a:	6193      	str	r3, [r2, #24]
 800043c:	4b29      	ldr	r3, [pc, #164]	@ (80004e4 <HAL_UART_MspInit+0xec>)
 800043e:	699b      	ldr	r3, [r3, #24]
 8000440:	f003 0304 	and.w	r3, r3, #4
 8000444:	60bb      	str	r3, [r7, #8]
 8000446:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000448:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800044c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800044e:	2302      	movs	r3, #2
 8000450:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000452:	2303      	movs	r3, #3
 8000454:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000456:	f107 0310 	add.w	r3, r7, #16
 800045a:	4619      	mov	r1, r3
 800045c:	4822      	ldr	r0, [pc, #136]	@ (80004e8 <HAL_UART_MspInit+0xf0>)
 800045e:	f000 fceb 	bl	8000e38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000462:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000466:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000468:	2300      	movs	r3, #0
 800046a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800046c:	2300      	movs	r3, #0
 800046e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000470:	f107 0310 	add.w	r3, r7, #16
 8000474:	4619      	mov	r1, r3
 8000476:	481c      	ldr	r0, [pc, #112]	@ (80004e8 <HAL_UART_MspInit+0xf0>)
 8000478:	f000 fcde 	bl	8000e38 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800047c:	4b1b      	ldr	r3, [pc, #108]	@ (80004ec <HAL_UART_MspInit+0xf4>)
 800047e:	4a1c      	ldr	r2, [pc, #112]	@ (80004f0 <HAL_UART_MspInit+0xf8>)
 8000480:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000482:	4b1a      	ldr	r3, [pc, #104]	@ (80004ec <HAL_UART_MspInit+0xf4>)
 8000484:	2200      	movs	r2, #0
 8000486:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000488:	4b18      	ldr	r3, [pc, #96]	@ (80004ec <HAL_UART_MspInit+0xf4>)
 800048a:	2200      	movs	r2, #0
 800048c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800048e:	4b17      	ldr	r3, [pc, #92]	@ (80004ec <HAL_UART_MspInit+0xf4>)
 8000490:	2280      	movs	r2, #128	@ 0x80
 8000492:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000494:	4b15      	ldr	r3, [pc, #84]	@ (80004ec <HAL_UART_MspInit+0xf4>)
 8000496:	2200      	movs	r2, #0
 8000498:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800049a:	4b14      	ldr	r3, [pc, #80]	@ (80004ec <HAL_UART_MspInit+0xf4>)
 800049c:	2200      	movs	r2, #0
 800049e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80004a0:	4b12      	ldr	r3, [pc, #72]	@ (80004ec <HAL_UART_MspInit+0xf4>)
 80004a2:	2220      	movs	r2, #32
 80004a4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80004a6:	4b11      	ldr	r3, [pc, #68]	@ (80004ec <HAL_UART_MspInit+0xf4>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80004ac:	480f      	ldr	r0, [pc, #60]	@ (80004ec <HAL_UART_MspInit+0xf4>)
 80004ae:	f000 fa21 	bl	80008f4 <HAL_DMA_Init>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d001      	beq.n	80004bc <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80004b8:	f7ff ff66 	bl	8000388 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	4a0b      	ldr	r2, [pc, #44]	@ (80004ec <HAL_UART_MspInit+0xf4>)
 80004c0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80004c2:	4a0a      	ldr	r2, [pc, #40]	@ (80004ec <HAL_UART_MspInit+0xf4>)
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80004c8:	2200      	movs	r2, #0
 80004ca:	2101      	movs	r1, #1
 80004cc:	2025      	movs	r0, #37	@ 0x25
 80004ce:	f000 f9da 	bl	8000886 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80004d2:	2025      	movs	r0, #37	@ 0x25
 80004d4:	f000 f9f3 	bl	80008be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80004d8:	bf00      	nop
 80004da:	3720      	adds	r7, #32
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	40013800 	.word	0x40013800
 80004e4:	40021000 	.word	0x40021000
 80004e8:	40010800 	.word	0x40010800
 80004ec:	200000a0 	.word	0x200000a0
 80004f0:	40020058 	.word	0x40020058

080004f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004f8:	bf00      	nop
 80004fa:	e7fd      	b.n	80004f8 <NMI_Handler+0x4>

080004fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000500:	bf00      	nop
 8000502:	e7fd      	b.n	8000500 <HardFault_Handler+0x4>

08000504 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000508:	bf00      	nop
 800050a:	e7fd      	b.n	8000508 <MemManage_Handler+0x4>

0800050c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000510:	bf00      	nop
 8000512:	e7fd      	b.n	8000510 <BusFault_Handler+0x4>

08000514 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000518:	bf00      	nop
 800051a:	e7fd      	b.n	8000518 <UsageFault_Handler+0x4>

0800051c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000520:	bf00      	nop
 8000522:	46bd      	mov	sp, r7
 8000524:	bc80      	pop	{r7}
 8000526:	4770      	bx	lr

08000528 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800052c:	bf00      	nop
 800052e:	46bd      	mov	sp, r7
 8000530:	bc80      	pop	{r7}
 8000532:	4770      	bx	lr

08000534 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	bc80      	pop	{r7}
 800053e:	4770      	bx	lr

08000540 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000544:	f000 f888 	bl	8000658 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000548:	bf00      	nop
 800054a:	bd80      	pop	{r7, pc}

0800054c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000550:	4802      	ldr	r0, [pc, #8]	@ (800055c <DMA1_Channel5_IRQHandler+0x10>)
 8000552:	f000 fb3d 	bl	8000bd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000556:	bf00      	nop
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	200000a0 	.word	0x200000a0

08000560 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000564:	4802      	ldr	r0, [pc, #8]	@ (8000570 <USART1_IRQHandler+0x10>)
 8000566:	f001 fb53 	bl	8001c10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800056a:	bf00      	nop
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	20000028 	.word	0x20000028

08000574 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000578:	bf00      	nop
 800057a:	46bd      	mov	sp, r7
 800057c:	bc80      	pop	{r7}
 800057e:	4770      	bx	lr

08000580 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000580:	f7ff fff8 	bl	8000574 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000584:	480b      	ldr	r0, [pc, #44]	@ (80005b4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000586:	490c      	ldr	r1, [pc, #48]	@ (80005b8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000588:	4a0c      	ldr	r2, [pc, #48]	@ (80005bc <LoopFillZerobss+0x16>)
  movs r3, #0
 800058a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800058c:	e002      	b.n	8000594 <LoopCopyDataInit>

0800058e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800058e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000590:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000592:	3304      	adds	r3, #4

08000594 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000594:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000596:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000598:	d3f9      	bcc.n	800058e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800059a:	4a09      	ldr	r2, [pc, #36]	@ (80005c0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800059c:	4c09      	ldr	r4, [pc, #36]	@ (80005c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800059e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005a0:	e001      	b.n	80005a6 <LoopFillZerobss>

080005a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005a4:	3204      	adds	r2, #4

080005a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005a8:	d3fb      	bcc.n	80005a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005aa:	f002 fabb 	bl	8002b24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005ae:	f7ff fdcd 	bl	800014c <main>
  bx lr
 80005b2:	4770      	bx	lr
  ldr r0, =_sdata
 80005b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005b8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005bc:	08002bf8 	.word	0x08002bf8
  ldr r2, =_sbss
 80005c0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005c4:	2000014c 	.word	0x2000014c

080005c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005c8:	e7fe      	b.n	80005c8 <ADC1_2_IRQHandler>
	...

080005cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005d0:	4b08      	ldr	r3, [pc, #32]	@ (80005f4 <HAL_Init+0x28>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a07      	ldr	r2, [pc, #28]	@ (80005f4 <HAL_Init+0x28>)
 80005d6:	f043 0310 	orr.w	r3, r3, #16
 80005da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005dc:	2003      	movs	r0, #3
 80005de:	f000 f947 	bl	8000870 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005e2:	200f      	movs	r0, #15
 80005e4:	f000 f808 	bl	80005f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005e8:	f7ff fed4 	bl	8000394 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005ec:	2300      	movs	r3, #0
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40022000 	.word	0x40022000

080005f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000600:	4b12      	ldr	r3, [pc, #72]	@ (800064c <HAL_InitTick+0x54>)
 8000602:	681a      	ldr	r2, [r3, #0]
 8000604:	4b12      	ldr	r3, [pc, #72]	@ (8000650 <HAL_InitTick+0x58>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	4619      	mov	r1, r3
 800060a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800060e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000612:	fbb2 f3f3 	udiv	r3, r2, r3
 8000616:	4618      	mov	r0, r3
 8000618:	f000 f95f 	bl	80008da <HAL_SYSTICK_Config>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000622:	2301      	movs	r3, #1
 8000624:	e00e      	b.n	8000644 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	2b0f      	cmp	r3, #15
 800062a:	d80a      	bhi.n	8000642 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800062c:	2200      	movs	r2, #0
 800062e:	6879      	ldr	r1, [r7, #4]
 8000630:	f04f 30ff 	mov.w	r0, #4294967295
 8000634:	f000 f927 	bl	8000886 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000638:	4a06      	ldr	r2, [pc, #24]	@ (8000654 <HAL_InitTick+0x5c>)
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800063e:	2300      	movs	r3, #0
 8000640:	e000      	b.n	8000644 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000642:	2301      	movs	r3, #1
}
 8000644:	4618      	mov	r0, r3
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20000000 	.word	0x20000000
 8000650:	20000008 	.word	0x20000008
 8000654:	20000004 	.word	0x20000004

08000658 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800065c:	4b05      	ldr	r3, [pc, #20]	@ (8000674 <HAL_IncTick+0x1c>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	461a      	mov	r2, r3
 8000662:	4b05      	ldr	r3, [pc, #20]	@ (8000678 <HAL_IncTick+0x20>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4413      	add	r3, r2
 8000668:	4a03      	ldr	r2, [pc, #12]	@ (8000678 <HAL_IncTick+0x20>)
 800066a:	6013      	str	r3, [r2, #0]
}
 800066c:	bf00      	nop
 800066e:	46bd      	mov	sp, r7
 8000670:	bc80      	pop	{r7}
 8000672:	4770      	bx	lr
 8000674:	20000008 	.word	0x20000008
 8000678:	20000148 	.word	0x20000148

0800067c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  return uwTick;
 8000680:	4b02      	ldr	r3, [pc, #8]	@ (800068c <HAL_GetTick+0x10>)
 8000682:	681b      	ldr	r3, [r3, #0]
}
 8000684:	4618      	mov	r0, r3
 8000686:	46bd      	mov	sp, r7
 8000688:	bc80      	pop	{r7}
 800068a:	4770      	bx	lr
 800068c:	20000148 	.word	0x20000148

08000690 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000698:	f7ff fff0 	bl	800067c <HAL_GetTick>
 800069c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006a8:	d005      	beq.n	80006b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006aa:	4b0a      	ldr	r3, [pc, #40]	@ (80006d4 <HAL_Delay+0x44>)
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	461a      	mov	r2, r3
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	4413      	add	r3, r2
 80006b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006b6:	bf00      	nop
 80006b8:	f7ff ffe0 	bl	800067c <HAL_GetTick>
 80006bc:	4602      	mov	r2, r0
 80006be:	68bb      	ldr	r3, [r7, #8]
 80006c0:	1ad3      	subs	r3, r2, r3
 80006c2:	68fa      	ldr	r2, [r7, #12]
 80006c4:	429a      	cmp	r2, r3
 80006c6:	d8f7      	bhi.n	80006b8 <HAL_Delay+0x28>
  {
  }
}
 80006c8:	bf00      	nop
 80006ca:	bf00      	nop
 80006cc:	3710      	adds	r7, #16
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	20000008 	.word	0x20000008

080006d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006d8:	b480      	push	{r7}
 80006da:	b085      	sub	sp, #20
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	f003 0307 	and.w	r3, r3, #7
 80006e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006e8:	4b0c      	ldr	r3, [pc, #48]	@ (800071c <__NVIC_SetPriorityGrouping+0x44>)
 80006ea:	68db      	ldr	r3, [r3, #12]
 80006ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006ee:	68ba      	ldr	r2, [r7, #8]
 80006f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80006f4:	4013      	ands	r3, r2
 80006f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000700:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000704:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000708:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800070a:	4a04      	ldr	r2, [pc, #16]	@ (800071c <__NVIC_SetPriorityGrouping+0x44>)
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	60d3      	str	r3, [r2, #12]
}
 8000710:	bf00      	nop
 8000712:	3714      	adds	r7, #20
 8000714:	46bd      	mov	sp, r7
 8000716:	bc80      	pop	{r7}
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	e000ed00 	.word	0xe000ed00

08000720 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000724:	4b04      	ldr	r3, [pc, #16]	@ (8000738 <__NVIC_GetPriorityGrouping+0x18>)
 8000726:	68db      	ldr	r3, [r3, #12]
 8000728:	0a1b      	lsrs	r3, r3, #8
 800072a:	f003 0307 	and.w	r3, r3, #7
}
 800072e:	4618      	mov	r0, r3
 8000730:	46bd      	mov	sp, r7
 8000732:	bc80      	pop	{r7}
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	e000ed00 	.word	0xe000ed00

0800073c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800074a:	2b00      	cmp	r3, #0
 800074c:	db0b      	blt.n	8000766 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800074e:	79fb      	ldrb	r3, [r7, #7]
 8000750:	f003 021f 	and.w	r2, r3, #31
 8000754:	4906      	ldr	r1, [pc, #24]	@ (8000770 <__NVIC_EnableIRQ+0x34>)
 8000756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075a:	095b      	lsrs	r3, r3, #5
 800075c:	2001      	movs	r0, #1
 800075e:	fa00 f202 	lsl.w	r2, r0, r2
 8000762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000766:	bf00      	nop
 8000768:	370c      	adds	r7, #12
 800076a:	46bd      	mov	sp, r7
 800076c:	bc80      	pop	{r7}
 800076e:	4770      	bx	lr
 8000770:	e000e100 	.word	0xe000e100

08000774 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	6039      	str	r1, [r7, #0]
 800077e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000784:	2b00      	cmp	r3, #0
 8000786:	db0a      	blt.n	800079e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	b2da      	uxtb	r2, r3
 800078c:	490c      	ldr	r1, [pc, #48]	@ (80007c0 <__NVIC_SetPriority+0x4c>)
 800078e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000792:	0112      	lsls	r2, r2, #4
 8000794:	b2d2      	uxtb	r2, r2
 8000796:	440b      	add	r3, r1
 8000798:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800079c:	e00a      	b.n	80007b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	b2da      	uxtb	r2, r3
 80007a2:	4908      	ldr	r1, [pc, #32]	@ (80007c4 <__NVIC_SetPriority+0x50>)
 80007a4:	79fb      	ldrb	r3, [r7, #7]
 80007a6:	f003 030f 	and.w	r3, r3, #15
 80007aa:	3b04      	subs	r3, #4
 80007ac:	0112      	lsls	r2, r2, #4
 80007ae:	b2d2      	uxtb	r2, r2
 80007b0:	440b      	add	r3, r1
 80007b2:	761a      	strb	r2, [r3, #24]
}
 80007b4:	bf00      	nop
 80007b6:	370c      	adds	r7, #12
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bc80      	pop	{r7}
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	e000e100 	.word	0xe000e100
 80007c4:	e000ed00 	.word	0xe000ed00

080007c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b089      	sub	sp, #36	@ 0x24
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	60f8      	str	r0, [r7, #12]
 80007d0:	60b9      	str	r1, [r7, #8]
 80007d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	f003 0307 	and.w	r3, r3, #7
 80007da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007dc:	69fb      	ldr	r3, [r7, #28]
 80007de:	f1c3 0307 	rsb	r3, r3, #7
 80007e2:	2b04      	cmp	r3, #4
 80007e4:	bf28      	it	cs
 80007e6:	2304      	movcs	r3, #4
 80007e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007ea:	69fb      	ldr	r3, [r7, #28]
 80007ec:	3304      	adds	r3, #4
 80007ee:	2b06      	cmp	r3, #6
 80007f0:	d902      	bls.n	80007f8 <NVIC_EncodePriority+0x30>
 80007f2:	69fb      	ldr	r3, [r7, #28]
 80007f4:	3b03      	subs	r3, #3
 80007f6:	e000      	b.n	80007fa <NVIC_EncodePriority+0x32>
 80007f8:	2300      	movs	r3, #0
 80007fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007fc:	f04f 32ff 	mov.w	r2, #4294967295
 8000800:	69bb      	ldr	r3, [r7, #24]
 8000802:	fa02 f303 	lsl.w	r3, r2, r3
 8000806:	43da      	mvns	r2, r3
 8000808:	68bb      	ldr	r3, [r7, #8]
 800080a:	401a      	ands	r2, r3
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000810:	f04f 31ff 	mov.w	r1, #4294967295
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	fa01 f303 	lsl.w	r3, r1, r3
 800081a:	43d9      	mvns	r1, r3
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000820:	4313      	orrs	r3, r2
         );
}
 8000822:	4618      	mov	r0, r3
 8000824:	3724      	adds	r7, #36	@ 0x24
 8000826:	46bd      	mov	sp, r7
 8000828:	bc80      	pop	{r7}
 800082a:	4770      	bx	lr

0800082c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	3b01      	subs	r3, #1
 8000838:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800083c:	d301      	bcc.n	8000842 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800083e:	2301      	movs	r3, #1
 8000840:	e00f      	b.n	8000862 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000842:	4a0a      	ldr	r2, [pc, #40]	@ (800086c <SysTick_Config+0x40>)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	3b01      	subs	r3, #1
 8000848:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800084a:	210f      	movs	r1, #15
 800084c:	f04f 30ff 	mov.w	r0, #4294967295
 8000850:	f7ff ff90 	bl	8000774 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000854:	4b05      	ldr	r3, [pc, #20]	@ (800086c <SysTick_Config+0x40>)
 8000856:	2200      	movs	r2, #0
 8000858:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800085a:	4b04      	ldr	r3, [pc, #16]	@ (800086c <SysTick_Config+0x40>)
 800085c:	2207      	movs	r2, #7
 800085e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000860:	2300      	movs	r3, #0
}
 8000862:	4618      	mov	r0, r3
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	e000e010 	.word	0xe000e010

08000870 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000878:	6878      	ldr	r0, [r7, #4]
 800087a:	f7ff ff2d 	bl	80006d8 <__NVIC_SetPriorityGrouping>
}
 800087e:	bf00      	nop
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}

08000886 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000886:	b580      	push	{r7, lr}
 8000888:	b086      	sub	sp, #24
 800088a:	af00      	add	r7, sp, #0
 800088c:	4603      	mov	r3, r0
 800088e:	60b9      	str	r1, [r7, #8]
 8000890:	607a      	str	r2, [r7, #4]
 8000892:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000894:	2300      	movs	r3, #0
 8000896:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000898:	f7ff ff42 	bl	8000720 <__NVIC_GetPriorityGrouping>
 800089c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800089e:	687a      	ldr	r2, [r7, #4]
 80008a0:	68b9      	ldr	r1, [r7, #8]
 80008a2:	6978      	ldr	r0, [r7, #20]
 80008a4:	f7ff ff90 	bl	80007c8 <NVIC_EncodePriority>
 80008a8:	4602      	mov	r2, r0
 80008aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008ae:	4611      	mov	r1, r2
 80008b0:	4618      	mov	r0, r3
 80008b2:	f7ff ff5f 	bl	8000774 <__NVIC_SetPriority>
}
 80008b6:	bf00      	nop
 80008b8:	3718      	adds	r7, #24
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}

080008be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008be:	b580      	push	{r7, lr}
 80008c0:	b082      	sub	sp, #8
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	4603      	mov	r3, r0
 80008c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008cc:	4618      	mov	r0, r3
 80008ce:	f7ff ff35 	bl	800073c <__NVIC_EnableIRQ>
}
 80008d2:	bf00      	nop
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}

080008da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008da:	b580      	push	{r7, lr}
 80008dc:	b082      	sub	sp, #8
 80008de:	af00      	add	r7, sp, #0
 80008e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008e2:	6878      	ldr	r0, [r7, #4]
 80008e4:	f7ff ffa2 	bl	800082c <SysTick_Config>
 80008e8:	4603      	mov	r3, r0
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
	...

080008f4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b085      	sub	sp, #20
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80008fc:	2300      	movs	r3, #0
 80008fe:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d101      	bne.n	800090a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000906:	2301      	movs	r3, #1
 8000908:	e043      	b.n	8000992 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	461a      	mov	r2, r3
 8000910:	4b22      	ldr	r3, [pc, #136]	@ (800099c <HAL_DMA_Init+0xa8>)
 8000912:	4413      	add	r3, r2
 8000914:	4a22      	ldr	r2, [pc, #136]	@ (80009a0 <HAL_DMA_Init+0xac>)
 8000916:	fba2 2303 	umull	r2, r3, r2, r3
 800091a:	091b      	lsrs	r3, r3, #4
 800091c:	009a      	lsls	r2, r3, #2
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	4a1f      	ldr	r2, [pc, #124]	@ (80009a4 <HAL_DMA_Init+0xb0>)
 8000926:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	2202      	movs	r2, #2
 800092c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800093e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000942:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800094c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	68db      	ldr	r3, [r3, #12]
 8000952:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000958:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	695b      	ldr	r3, [r3, #20]
 800095e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000964:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	69db      	ldr	r3, [r3, #28]
 800096a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800096c:	68fa      	ldr	r2, [r7, #12]
 800096e:	4313      	orrs	r3, r2
 8000970:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	68fa      	ldr	r2, [r7, #12]
 8000978:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	2200      	movs	r2, #0
 800097e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	2201      	movs	r2, #1
 8000984:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	2200      	movs	r2, #0
 800098c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000990:	2300      	movs	r3, #0
}
 8000992:	4618      	mov	r0, r3
 8000994:	3714      	adds	r7, #20
 8000996:	46bd      	mov	sp, r7
 8000998:	bc80      	pop	{r7}
 800099a:	4770      	bx	lr
 800099c:	bffdfff8 	.word	0xbffdfff8
 80009a0:	cccccccd 	.word	0xcccccccd
 80009a4:	40020000 	.word	0x40020000

080009a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b086      	sub	sp, #24
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	60f8      	str	r0, [r7, #12]
 80009b0:	60b9      	str	r1, [r7, #8]
 80009b2:	607a      	str	r2, [r7, #4]
 80009b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80009b6:	2300      	movs	r3, #0
 80009b8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d101      	bne.n	80009c8 <HAL_DMA_Start_IT+0x20>
 80009c4:	2302      	movs	r3, #2
 80009c6:	e04b      	b.n	8000a60 <HAL_DMA_Start_IT+0xb8>
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	2201      	movs	r2, #1
 80009cc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d13a      	bne.n	8000a52 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	2202      	movs	r2, #2
 80009e0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	2200      	movs	r2, #0
 80009e8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	f022 0201 	bic.w	r2, r2, #1
 80009f8:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	687a      	ldr	r2, [r7, #4]
 80009fe:	68b9      	ldr	r1, [r7, #8]
 8000a00:	68f8      	ldr	r0, [r7, #12]
 8000a02:	f000 f9eb 	bl	8000ddc <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d008      	beq.n	8000a20 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	681a      	ldr	r2, [r3, #0]
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f042 020e 	orr.w	r2, r2, #14
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	e00f      	b.n	8000a40 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	681a      	ldr	r2, [r3, #0]
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	f022 0204 	bic.w	r2, r2, #4
 8000a2e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	f042 020a 	orr.w	r2, r2, #10
 8000a3e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	681a      	ldr	r2, [r3, #0]
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	f042 0201 	orr.w	r2, r2, #1
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	e005      	b.n	8000a5e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	2200      	movs	r2, #0
 8000a56:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000a5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	3718      	adds	r7, #24
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}

08000a68 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a70:	2300      	movs	r3, #0
 8000a72:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	2b02      	cmp	r3, #2
 8000a7e:	d008      	beq.n	8000a92 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	2204      	movs	r2, #4
 8000a84:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	2200      	movs	r2, #0
 8000a8a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	e020      	b.n	8000ad4 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	681a      	ldr	r2, [r3, #0]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f022 020e 	bic.w	r2, r2, #14
 8000aa0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f022 0201 	bic.w	r2, r2, #1
 8000ab0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000aba:	2101      	movs	r1, #1
 8000abc:	fa01 f202 	lsl.w	r2, r1, r2
 8000ac0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2200      	movs	r2, #0
 8000ace:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3714      	adds	r7, #20
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bc80      	pop	{r7}
 8000adc:	4770      	bx	lr
	...

08000ae0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	2b02      	cmp	r3, #2
 8000af6:	d005      	beq.n	8000b04 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2204      	movs	r2, #4
 8000afc:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000afe:	2301      	movs	r3, #1
 8000b00:	73fb      	strb	r3, [r7, #15]
 8000b02:	e051      	b.n	8000ba8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f022 020e 	bic.w	r2, r2, #14
 8000b12:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f022 0201 	bic.w	r2, r2, #1
 8000b22:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a22      	ldr	r2, [pc, #136]	@ (8000bb4 <HAL_DMA_Abort_IT+0xd4>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d029      	beq.n	8000b82 <HAL_DMA_Abort_IT+0xa2>
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a21      	ldr	r2, [pc, #132]	@ (8000bb8 <HAL_DMA_Abort_IT+0xd8>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d022      	beq.n	8000b7e <HAL_DMA_Abort_IT+0x9e>
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a1f      	ldr	r2, [pc, #124]	@ (8000bbc <HAL_DMA_Abort_IT+0xdc>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d01a      	beq.n	8000b78 <HAL_DMA_Abort_IT+0x98>
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4a1e      	ldr	r2, [pc, #120]	@ (8000bc0 <HAL_DMA_Abort_IT+0xe0>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d012      	beq.n	8000b72 <HAL_DMA_Abort_IT+0x92>
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a1c      	ldr	r2, [pc, #112]	@ (8000bc4 <HAL_DMA_Abort_IT+0xe4>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d00a      	beq.n	8000b6c <HAL_DMA_Abort_IT+0x8c>
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4a1b      	ldr	r2, [pc, #108]	@ (8000bc8 <HAL_DMA_Abort_IT+0xe8>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d102      	bne.n	8000b66 <HAL_DMA_Abort_IT+0x86>
 8000b60:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000b64:	e00e      	b.n	8000b84 <HAL_DMA_Abort_IT+0xa4>
 8000b66:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000b6a:	e00b      	b.n	8000b84 <HAL_DMA_Abort_IT+0xa4>
 8000b6c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b70:	e008      	b.n	8000b84 <HAL_DMA_Abort_IT+0xa4>
 8000b72:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b76:	e005      	b.n	8000b84 <HAL_DMA_Abort_IT+0xa4>
 8000b78:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b7c:	e002      	b.n	8000b84 <HAL_DMA_Abort_IT+0xa4>
 8000b7e:	2310      	movs	r3, #16
 8000b80:	e000      	b.n	8000b84 <HAL_DMA_Abort_IT+0xa4>
 8000b82:	2301      	movs	r3, #1
 8000b84:	4a11      	ldr	r2, [pc, #68]	@ (8000bcc <HAL_DMA_Abort_IT+0xec>)
 8000b86:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	2200      	movs	r2, #0
 8000b94:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d003      	beq.n	8000ba8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ba4:	6878      	ldr	r0, [r7, #4]
 8000ba6:	4798      	blx	r3
    } 
  }
  return status;
 8000ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3710      	adds	r7, #16
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40020008 	.word	0x40020008
 8000bb8:	4002001c 	.word	0x4002001c
 8000bbc:	40020030 	.word	0x40020030
 8000bc0:	40020044 	.word	0x40020044
 8000bc4:	40020058 	.word	0x40020058
 8000bc8:	4002006c 	.word	0x4002006c
 8000bcc:	40020000 	.word	0x40020000

08000bd0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bec:	2204      	movs	r2, #4
 8000bee:	409a      	lsls	r2, r3
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d04f      	beq.n	8000c98 <HAL_DMA_IRQHandler+0xc8>
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	f003 0304 	and.w	r3, r3, #4
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d04a      	beq.n	8000c98 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f003 0320 	and.w	r3, r3, #32
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d107      	bne.n	8000c20 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f022 0204 	bic.w	r2, r2, #4
 8000c1e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a66      	ldr	r2, [pc, #408]	@ (8000dc0 <HAL_DMA_IRQHandler+0x1f0>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d029      	beq.n	8000c7e <HAL_DMA_IRQHandler+0xae>
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a65      	ldr	r2, [pc, #404]	@ (8000dc4 <HAL_DMA_IRQHandler+0x1f4>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d022      	beq.n	8000c7a <HAL_DMA_IRQHandler+0xaa>
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a63      	ldr	r2, [pc, #396]	@ (8000dc8 <HAL_DMA_IRQHandler+0x1f8>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d01a      	beq.n	8000c74 <HAL_DMA_IRQHandler+0xa4>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a62      	ldr	r2, [pc, #392]	@ (8000dcc <HAL_DMA_IRQHandler+0x1fc>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d012      	beq.n	8000c6e <HAL_DMA_IRQHandler+0x9e>
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a60      	ldr	r2, [pc, #384]	@ (8000dd0 <HAL_DMA_IRQHandler+0x200>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d00a      	beq.n	8000c68 <HAL_DMA_IRQHandler+0x98>
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4a5f      	ldr	r2, [pc, #380]	@ (8000dd4 <HAL_DMA_IRQHandler+0x204>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d102      	bne.n	8000c62 <HAL_DMA_IRQHandler+0x92>
 8000c5c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000c60:	e00e      	b.n	8000c80 <HAL_DMA_IRQHandler+0xb0>
 8000c62:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000c66:	e00b      	b.n	8000c80 <HAL_DMA_IRQHandler+0xb0>
 8000c68:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8000c6c:	e008      	b.n	8000c80 <HAL_DMA_IRQHandler+0xb0>
 8000c6e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000c72:	e005      	b.n	8000c80 <HAL_DMA_IRQHandler+0xb0>
 8000c74:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c78:	e002      	b.n	8000c80 <HAL_DMA_IRQHandler+0xb0>
 8000c7a:	2340      	movs	r3, #64	@ 0x40
 8000c7c:	e000      	b.n	8000c80 <HAL_DMA_IRQHandler+0xb0>
 8000c7e:	2304      	movs	r3, #4
 8000c80:	4a55      	ldr	r2, [pc, #340]	@ (8000dd8 <HAL_DMA_IRQHandler+0x208>)
 8000c82:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	f000 8094 	beq.w	8000db6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000c96:	e08e      	b.n	8000db6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c9c:	2202      	movs	r2, #2
 8000c9e:	409a      	lsls	r2, r3
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d056      	beq.n	8000d56 <HAL_DMA_IRQHandler+0x186>
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	f003 0302 	and.w	r3, r3, #2
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d051      	beq.n	8000d56 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f003 0320 	and.w	r3, r3, #32
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d10b      	bne.n	8000cd8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f022 020a 	bic.w	r2, r2, #10
 8000cce:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a38      	ldr	r2, [pc, #224]	@ (8000dc0 <HAL_DMA_IRQHandler+0x1f0>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d029      	beq.n	8000d36 <HAL_DMA_IRQHandler+0x166>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a37      	ldr	r2, [pc, #220]	@ (8000dc4 <HAL_DMA_IRQHandler+0x1f4>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d022      	beq.n	8000d32 <HAL_DMA_IRQHandler+0x162>
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a35      	ldr	r2, [pc, #212]	@ (8000dc8 <HAL_DMA_IRQHandler+0x1f8>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d01a      	beq.n	8000d2c <HAL_DMA_IRQHandler+0x15c>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a34      	ldr	r2, [pc, #208]	@ (8000dcc <HAL_DMA_IRQHandler+0x1fc>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d012      	beq.n	8000d26 <HAL_DMA_IRQHandler+0x156>
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a32      	ldr	r2, [pc, #200]	@ (8000dd0 <HAL_DMA_IRQHandler+0x200>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d00a      	beq.n	8000d20 <HAL_DMA_IRQHandler+0x150>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a31      	ldr	r2, [pc, #196]	@ (8000dd4 <HAL_DMA_IRQHandler+0x204>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d102      	bne.n	8000d1a <HAL_DMA_IRQHandler+0x14a>
 8000d14:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000d18:	e00e      	b.n	8000d38 <HAL_DMA_IRQHandler+0x168>
 8000d1a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000d1e:	e00b      	b.n	8000d38 <HAL_DMA_IRQHandler+0x168>
 8000d20:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d24:	e008      	b.n	8000d38 <HAL_DMA_IRQHandler+0x168>
 8000d26:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d2a:	e005      	b.n	8000d38 <HAL_DMA_IRQHandler+0x168>
 8000d2c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d30:	e002      	b.n	8000d38 <HAL_DMA_IRQHandler+0x168>
 8000d32:	2320      	movs	r3, #32
 8000d34:	e000      	b.n	8000d38 <HAL_DMA_IRQHandler+0x168>
 8000d36:	2302      	movs	r3, #2
 8000d38:	4a27      	ldr	r2, [pc, #156]	@ (8000dd8 <HAL_DMA_IRQHandler+0x208>)
 8000d3a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d034      	beq.n	8000db6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d50:	6878      	ldr	r0, [r7, #4]
 8000d52:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000d54:	e02f      	b.n	8000db6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d5a:	2208      	movs	r2, #8
 8000d5c:	409a      	lsls	r2, r3
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	4013      	ands	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d028      	beq.n	8000db8 <HAL_DMA_IRQHandler+0x1e8>
 8000d66:	68bb      	ldr	r3, [r7, #8]
 8000d68:	f003 0308 	and.w	r3, r3, #8
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d023      	beq.n	8000db8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f022 020e 	bic.w	r2, r2, #14
 8000d7e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000d88:	2101      	movs	r1, #1
 8000d8a:	fa01 f202 	lsl.w	r2, r1, r2
 8000d8e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2201      	movs	r2, #1
 8000d94:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2201      	movs	r2, #1
 8000d9a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2200      	movs	r2, #0
 8000da2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d004      	beq.n	8000db8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	4798      	blx	r3
    }
  }
  return;
 8000db6:	bf00      	nop
 8000db8:	bf00      	nop
}
 8000dba:	3710      	adds	r7, #16
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40020008 	.word	0x40020008
 8000dc4:	4002001c 	.word	0x4002001c
 8000dc8:	40020030 	.word	0x40020030
 8000dcc:	40020044 	.word	0x40020044
 8000dd0:	40020058 	.word	0x40020058
 8000dd4:	4002006c 	.word	0x4002006c
 8000dd8:	40020000 	.word	0x40020000

08000ddc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b085      	sub	sp, #20
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	60f8      	str	r0, [r7, #12]
 8000de4:	60b9      	str	r1, [r7, #8]
 8000de6:	607a      	str	r2, [r7, #4]
 8000de8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000df2:	2101      	movs	r1, #1
 8000df4:	fa01 f202 	lsl.w	r2, r1, r2
 8000df8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	683a      	ldr	r2, [r7, #0]
 8000e00:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	2b10      	cmp	r3, #16
 8000e08:	d108      	bne.n	8000e1c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	687a      	ldr	r2, [r7, #4]
 8000e10:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	68ba      	ldr	r2, [r7, #8]
 8000e18:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000e1a:	e007      	b.n	8000e2c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	68ba      	ldr	r2, [r7, #8]
 8000e22:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	687a      	ldr	r2, [r7, #4]
 8000e2a:	60da      	str	r2, [r3, #12]
}
 8000e2c:	bf00      	nop
 8000e2e:	3714      	adds	r7, #20
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bc80      	pop	{r7}
 8000e34:	4770      	bx	lr
	...

08000e38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b08b      	sub	sp, #44	@ 0x2c
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e42:	2300      	movs	r3, #0
 8000e44:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e46:	2300      	movs	r3, #0
 8000e48:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e4a:	e169      	b.n	8001120 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	69fa      	ldr	r2, [r7, #28]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	f040 8158 	bne.w	800111a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	4a9a      	ldr	r2, [pc, #616]	@ (80010d8 <HAL_GPIO_Init+0x2a0>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d05e      	beq.n	8000f32 <HAL_GPIO_Init+0xfa>
 8000e74:	4a98      	ldr	r2, [pc, #608]	@ (80010d8 <HAL_GPIO_Init+0x2a0>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d875      	bhi.n	8000f66 <HAL_GPIO_Init+0x12e>
 8000e7a:	4a98      	ldr	r2, [pc, #608]	@ (80010dc <HAL_GPIO_Init+0x2a4>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d058      	beq.n	8000f32 <HAL_GPIO_Init+0xfa>
 8000e80:	4a96      	ldr	r2, [pc, #600]	@ (80010dc <HAL_GPIO_Init+0x2a4>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d86f      	bhi.n	8000f66 <HAL_GPIO_Init+0x12e>
 8000e86:	4a96      	ldr	r2, [pc, #600]	@ (80010e0 <HAL_GPIO_Init+0x2a8>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d052      	beq.n	8000f32 <HAL_GPIO_Init+0xfa>
 8000e8c:	4a94      	ldr	r2, [pc, #592]	@ (80010e0 <HAL_GPIO_Init+0x2a8>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d869      	bhi.n	8000f66 <HAL_GPIO_Init+0x12e>
 8000e92:	4a94      	ldr	r2, [pc, #592]	@ (80010e4 <HAL_GPIO_Init+0x2ac>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d04c      	beq.n	8000f32 <HAL_GPIO_Init+0xfa>
 8000e98:	4a92      	ldr	r2, [pc, #584]	@ (80010e4 <HAL_GPIO_Init+0x2ac>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d863      	bhi.n	8000f66 <HAL_GPIO_Init+0x12e>
 8000e9e:	4a92      	ldr	r2, [pc, #584]	@ (80010e8 <HAL_GPIO_Init+0x2b0>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d046      	beq.n	8000f32 <HAL_GPIO_Init+0xfa>
 8000ea4:	4a90      	ldr	r2, [pc, #576]	@ (80010e8 <HAL_GPIO_Init+0x2b0>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d85d      	bhi.n	8000f66 <HAL_GPIO_Init+0x12e>
 8000eaa:	2b12      	cmp	r3, #18
 8000eac:	d82a      	bhi.n	8000f04 <HAL_GPIO_Init+0xcc>
 8000eae:	2b12      	cmp	r3, #18
 8000eb0:	d859      	bhi.n	8000f66 <HAL_GPIO_Init+0x12e>
 8000eb2:	a201      	add	r2, pc, #4	@ (adr r2, 8000eb8 <HAL_GPIO_Init+0x80>)
 8000eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eb8:	08000f33 	.word	0x08000f33
 8000ebc:	08000f0d 	.word	0x08000f0d
 8000ec0:	08000f1f 	.word	0x08000f1f
 8000ec4:	08000f61 	.word	0x08000f61
 8000ec8:	08000f67 	.word	0x08000f67
 8000ecc:	08000f67 	.word	0x08000f67
 8000ed0:	08000f67 	.word	0x08000f67
 8000ed4:	08000f67 	.word	0x08000f67
 8000ed8:	08000f67 	.word	0x08000f67
 8000edc:	08000f67 	.word	0x08000f67
 8000ee0:	08000f67 	.word	0x08000f67
 8000ee4:	08000f67 	.word	0x08000f67
 8000ee8:	08000f67 	.word	0x08000f67
 8000eec:	08000f67 	.word	0x08000f67
 8000ef0:	08000f67 	.word	0x08000f67
 8000ef4:	08000f67 	.word	0x08000f67
 8000ef8:	08000f67 	.word	0x08000f67
 8000efc:	08000f15 	.word	0x08000f15
 8000f00:	08000f29 	.word	0x08000f29
 8000f04:	4a79      	ldr	r2, [pc, #484]	@ (80010ec <HAL_GPIO_Init+0x2b4>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d013      	beq.n	8000f32 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f0a:	e02c      	b.n	8000f66 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	623b      	str	r3, [r7, #32]
          break;
 8000f12:	e029      	b.n	8000f68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	3304      	adds	r3, #4
 8000f1a:	623b      	str	r3, [r7, #32]
          break;
 8000f1c:	e024      	b.n	8000f68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	68db      	ldr	r3, [r3, #12]
 8000f22:	3308      	adds	r3, #8
 8000f24:	623b      	str	r3, [r7, #32]
          break;
 8000f26:	e01f      	b.n	8000f68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	330c      	adds	r3, #12
 8000f2e:	623b      	str	r3, [r7, #32]
          break;
 8000f30:	e01a      	b.n	8000f68 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d102      	bne.n	8000f40 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f3a:	2304      	movs	r3, #4
 8000f3c:	623b      	str	r3, [r7, #32]
          break;
 8000f3e:	e013      	b.n	8000f68 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d105      	bne.n	8000f54 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f48:	2308      	movs	r3, #8
 8000f4a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	69fa      	ldr	r2, [r7, #28]
 8000f50:	611a      	str	r2, [r3, #16]
          break;
 8000f52:	e009      	b.n	8000f68 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f54:	2308      	movs	r3, #8
 8000f56:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	69fa      	ldr	r2, [r7, #28]
 8000f5c:	615a      	str	r2, [r3, #20]
          break;
 8000f5e:	e003      	b.n	8000f68 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f60:	2300      	movs	r3, #0
 8000f62:	623b      	str	r3, [r7, #32]
          break;
 8000f64:	e000      	b.n	8000f68 <HAL_GPIO_Init+0x130>
          break;
 8000f66:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	2bff      	cmp	r3, #255	@ 0xff
 8000f6c:	d801      	bhi.n	8000f72 <HAL_GPIO_Init+0x13a>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	e001      	b.n	8000f76 <HAL_GPIO_Init+0x13e>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	3304      	adds	r3, #4
 8000f76:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f78:	69bb      	ldr	r3, [r7, #24]
 8000f7a:	2bff      	cmp	r3, #255	@ 0xff
 8000f7c:	d802      	bhi.n	8000f84 <HAL_GPIO_Init+0x14c>
 8000f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	e002      	b.n	8000f8a <HAL_GPIO_Init+0x152>
 8000f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f86:	3b08      	subs	r3, #8
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	210f      	movs	r1, #15
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	fa01 f303 	lsl.w	r3, r1, r3
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	401a      	ands	r2, r3
 8000f9c:	6a39      	ldr	r1, [r7, #32]
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa4:	431a      	orrs	r2, r3
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	f000 80b1 	beq.w	800111a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000fb8:	4b4d      	ldr	r3, [pc, #308]	@ (80010f0 <HAL_GPIO_Init+0x2b8>)
 8000fba:	699b      	ldr	r3, [r3, #24]
 8000fbc:	4a4c      	ldr	r2, [pc, #304]	@ (80010f0 <HAL_GPIO_Init+0x2b8>)
 8000fbe:	f043 0301 	orr.w	r3, r3, #1
 8000fc2:	6193      	str	r3, [r2, #24]
 8000fc4:	4b4a      	ldr	r3, [pc, #296]	@ (80010f0 <HAL_GPIO_Init+0x2b8>)
 8000fc6:	699b      	ldr	r3, [r3, #24]
 8000fc8:	f003 0301 	and.w	r3, r3, #1
 8000fcc:	60bb      	str	r3, [r7, #8]
 8000fce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000fd0:	4a48      	ldr	r2, [pc, #288]	@ (80010f4 <HAL_GPIO_Init+0x2bc>)
 8000fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fd4:	089b      	lsrs	r3, r3, #2
 8000fd6:	3302      	adds	r3, #2
 8000fd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fdc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fe0:	f003 0303 	and.w	r3, r3, #3
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	220f      	movs	r2, #15
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	43db      	mvns	r3, r3
 8000fee:	68fa      	ldr	r2, [r7, #12]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4a40      	ldr	r2, [pc, #256]	@ (80010f8 <HAL_GPIO_Init+0x2c0>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d013      	beq.n	8001024 <HAL_GPIO_Init+0x1ec>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	4a3f      	ldr	r2, [pc, #252]	@ (80010fc <HAL_GPIO_Init+0x2c4>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d00d      	beq.n	8001020 <HAL_GPIO_Init+0x1e8>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4a3e      	ldr	r2, [pc, #248]	@ (8001100 <HAL_GPIO_Init+0x2c8>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d007      	beq.n	800101c <HAL_GPIO_Init+0x1e4>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	4a3d      	ldr	r2, [pc, #244]	@ (8001104 <HAL_GPIO_Init+0x2cc>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d101      	bne.n	8001018 <HAL_GPIO_Init+0x1e0>
 8001014:	2303      	movs	r3, #3
 8001016:	e006      	b.n	8001026 <HAL_GPIO_Init+0x1ee>
 8001018:	2304      	movs	r3, #4
 800101a:	e004      	b.n	8001026 <HAL_GPIO_Init+0x1ee>
 800101c:	2302      	movs	r3, #2
 800101e:	e002      	b.n	8001026 <HAL_GPIO_Init+0x1ee>
 8001020:	2301      	movs	r3, #1
 8001022:	e000      	b.n	8001026 <HAL_GPIO_Init+0x1ee>
 8001024:	2300      	movs	r3, #0
 8001026:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001028:	f002 0203 	and.w	r2, r2, #3
 800102c:	0092      	lsls	r2, r2, #2
 800102e:	4093      	lsls	r3, r2
 8001030:	68fa      	ldr	r2, [r7, #12]
 8001032:	4313      	orrs	r3, r2
 8001034:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001036:	492f      	ldr	r1, [pc, #188]	@ (80010f4 <HAL_GPIO_Init+0x2bc>)
 8001038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800103a:	089b      	lsrs	r3, r3, #2
 800103c:	3302      	adds	r3, #2
 800103e:	68fa      	ldr	r2, [r7, #12]
 8001040:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800104c:	2b00      	cmp	r3, #0
 800104e:	d006      	beq.n	800105e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001050:	4b2d      	ldr	r3, [pc, #180]	@ (8001108 <HAL_GPIO_Init+0x2d0>)
 8001052:	689a      	ldr	r2, [r3, #8]
 8001054:	492c      	ldr	r1, [pc, #176]	@ (8001108 <HAL_GPIO_Init+0x2d0>)
 8001056:	69bb      	ldr	r3, [r7, #24]
 8001058:	4313      	orrs	r3, r2
 800105a:	608b      	str	r3, [r1, #8]
 800105c:	e006      	b.n	800106c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800105e:	4b2a      	ldr	r3, [pc, #168]	@ (8001108 <HAL_GPIO_Init+0x2d0>)
 8001060:	689a      	ldr	r2, [r3, #8]
 8001062:	69bb      	ldr	r3, [r7, #24]
 8001064:	43db      	mvns	r3, r3
 8001066:	4928      	ldr	r1, [pc, #160]	@ (8001108 <HAL_GPIO_Init+0x2d0>)
 8001068:	4013      	ands	r3, r2
 800106a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001074:	2b00      	cmp	r3, #0
 8001076:	d006      	beq.n	8001086 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001078:	4b23      	ldr	r3, [pc, #140]	@ (8001108 <HAL_GPIO_Init+0x2d0>)
 800107a:	68da      	ldr	r2, [r3, #12]
 800107c:	4922      	ldr	r1, [pc, #136]	@ (8001108 <HAL_GPIO_Init+0x2d0>)
 800107e:	69bb      	ldr	r3, [r7, #24]
 8001080:	4313      	orrs	r3, r2
 8001082:	60cb      	str	r3, [r1, #12]
 8001084:	e006      	b.n	8001094 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001086:	4b20      	ldr	r3, [pc, #128]	@ (8001108 <HAL_GPIO_Init+0x2d0>)
 8001088:	68da      	ldr	r2, [r3, #12]
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	43db      	mvns	r3, r3
 800108e:	491e      	ldr	r1, [pc, #120]	@ (8001108 <HAL_GPIO_Init+0x2d0>)
 8001090:	4013      	ands	r3, r2
 8001092:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800109c:	2b00      	cmp	r3, #0
 800109e:	d006      	beq.n	80010ae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80010a0:	4b19      	ldr	r3, [pc, #100]	@ (8001108 <HAL_GPIO_Init+0x2d0>)
 80010a2:	685a      	ldr	r2, [r3, #4]
 80010a4:	4918      	ldr	r1, [pc, #96]	@ (8001108 <HAL_GPIO_Init+0x2d0>)
 80010a6:	69bb      	ldr	r3, [r7, #24]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	604b      	str	r3, [r1, #4]
 80010ac:	e006      	b.n	80010bc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80010ae:	4b16      	ldr	r3, [pc, #88]	@ (8001108 <HAL_GPIO_Init+0x2d0>)
 80010b0:	685a      	ldr	r2, [r3, #4]
 80010b2:	69bb      	ldr	r3, [r7, #24]
 80010b4:	43db      	mvns	r3, r3
 80010b6:	4914      	ldr	r1, [pc, #80]	@ (8001108 <HAL_GPIO_Init+0x2d0>)
 80010b8:	4013      	ands	r3, r2
 80010ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d021      	beq.n	800110c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80010c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001108 <HAL_GPIO_Init+0x2d0>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	490e      	ldr	r1, [pc, #56]	@ (8001108 <HAL_GPIO_Init+0x2d0>)
 80010ce:	69bb      	ldr	r3, [r7, #24]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	600b      	str	r3, [r1, #0]
 80010d4:	e021      	b.n	800111a <HAL_GPIO_Init+0x2e2>
 80010d6:	bf00      	nop
 80010d8:	10320000 	.word	0x10320000
 80010dc:	10310000 	.word	0x10310000
 80010e0:	10220000 	.word	0x10220000
 80010e4:	10210000 	.word	0x10210000
 80010e8:	10120000 	.word	0x10120000
 80010ec:	10110000 	.word	0x10110000
 80010f0:	40021000 	.word	0x40021000
 80010f4:	40010000 	.word	0x40010000
 80010f8:	40010800 	.word	0x40010800
 80010fc:	40010c00 	.word	0x40010c00
 8001100:	40011000 	.word	0x40011000
 8001104:	40011400 	.word	0x40011400
 8001108:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800110c:	4b0b      	ldr	r3, [pc, #44]	@ (800113c <HAL_GPIO_Init+0x304>)
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	43db      	mvns	r3, r3
 8001114:	4909      	ldr	r1, [pc, #36]	@ (800113c <HAL_GPIO_Init+0x304>)
 8001116:	4013      	ands	r3, r2
 8001118:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800111a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800111c:	3301      	adds	r3, #1
 800111e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001126:	fa22 f303 	lsr.w	r3, r2, r3
 800112a:	2b00      	cmp	r3, #0
 800112c:	f47f ae8e 	bne.w	8000e4c <HAL_GPIO_Init+0x14>
  }
}
 8001130:	bf00      	nop
 8001132:	bf00      	nop
 8001134:	372c      	adds	r7, #44	@ 0x2c
 8001136:	46bd      	mov	sp, r7
 8001138:	bc80      	pop	{r7}
 800113a:	4770      	bx	lr
 800113c:	40010400 	.word	0x40010400

08001140 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	460b      	mov	r3, r1
 800114a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001152:	887a      	ldrh	r2, [r7, #2]
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	4013      	ands	r3, r2
 8001158:	041a      	lsls	r2, r3, #16
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	43d9      	mvns	r1, r3
 800115e:	887b      	ldrh	r3, [r7, #2]
 8001160:	400b      	ands	r3, r1
 8001162:	431a      	orrs	r2, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	611a      	str	r2, [r3, #16]
}
 8001168:	bf00      	nop
 800116a:	3714      	adds	r7, #20
 800116c:	46bd      	mov	sp, r7
 800116e:	bc80      	pop	{r7}
 8001170:	4770      	bx	lr
	...

08001174 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d101      	bne.n	8001186 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e272      	b.n	800166c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	2b00      	cmp	r3, #0
 8001190:	f000 8087 	beq.w	80012a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001194:	4b92      	ldr	r3, [pc, #584]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f003 030c 	and.w	r3, r3, #12
 800119c:	2b04      	cmp	r3, #4
 800119e:	d00c      	beq.n	80011ba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011a0:	4b8f      	ldr	r3, [pc, #572]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f003 030c 	and.w	r3, r3, #12
 80011a8:	2b08      	cmp	r3, #8
 80011aa:	d112      	bne.n	80011d2 <HAL_RCC_OscConfig+0x5e>
 80011ac:	4b8c      	ldr	r3, [pc, #560]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011b8:	d10b      	bne.n	80011d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011ba:	4b89      	ldr	r3, [pc, #548]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d06c      	beq.n	80012a0 <HAL_RCC_OscConfig+0x12c>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d168      	bne.n	80012a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e24c      	b.n	800166c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011da:	d106      	bne.n	80011ea <HAL_RCC_OscConfig+0x76>
 80011dc:	4b80      	ldr	r3, [pc, #512]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a7f      	ldr	r2, [pc, #508]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 80011e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011e6:	6013      	str	r3, [r2, #0]
 80011e8:	e02e      	b.n	8001248 <HAL_RCC_OscConfig+0xd4>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d10c      	bne.n	800120c <HAL_RCC_OscConfig+0x98>
 80011f2:	4b7b      	ldr	r3, [pc, #492]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a7a      	ldr	r2, [pc, #488]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 80011f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011fc:	6013      	str	r3, [r2, #0]
 80011fe:	4b78      	ldr	r3, [pc, #480]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a77      	ldr	r2, [pc, #476]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 8001204:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001208:	6013      	str	r3, [r2, #0]
 800120a:	e01d      	b.n	8001248 <HAL_RCC_OscConfig+0xd4>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001214:	d10c      	bne.n	8001230 <HAL_RCC_OscConfig+0xbc>
 8001216:	4b72      	ldr	r3, [pc, #456]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a71      	ldr	r2, [pc, #452]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 800121c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001220:	6013      	str	r3, [r2, #0]
 8001222:	4b6f      	ldr	r3, [pc, #444]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a6e      	ldr	r2, [pc, #440]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 8001228:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800122c:	6013      	str	r3, [r2, #0]
 800122e:	e00b      	b.n	8001248 <HAL_RCC_OscConfig+0xd4>
 8001230:	4b6b      	ldr	r3, [pc, #428]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a6a      	ldr	r2, [pc, #424]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 8001236:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800123a:	6013      	str	r3, [r2, #0]
 800123c:	4b68      	ldr	r3, [pc, #416]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a67      	ldr	r2, [pc, #412]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 8001242:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001246:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d013      	beq.n	8001278 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001250:	f7ff fa14 	bl	800067c <HAL_GetTick>
 8001254:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001256:	e008      	b.n	800126a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001258:	f7ff fa10 	bl	800067c <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	2b64      	cmp	r3, #100	@ 0x64
 8001264:	d901      	bls.n	800126a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	e200      	b.n	800166c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800126a:	4b5d      	ldr	r3, [pc, #372]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d0f0      	beq.n	8001258 <HAL_RCC_OscConfig+0xe4>
 8001276:	e014      	b.n	80012a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001278:	f7ff fa00 	bl	800067c <HAL_GetTick>
 800127c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800127e:	e008      	b.n	8001292 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001280:	f7ff f9fc 	bl	800067c <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	2b64      	cmp	r3, #100	@ 0x64
 800128c:	d901      	bls.n	8001292 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800128e:	2303      	movs	r3, #3
 8001290:	e1ec      	b.n	800166c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001292:	4b53      	ldr	r3, [pc, #332]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d1f0      	bne.n	8001280 <HAL_RCC_OscConfig+0x10c>
 800129e:	e000      	b.n	80012a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 0302 	and.w	r3, r3, #2
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d063      	beq.n	8001376 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012ae:	4b4c      	ldr	r3, [pc, #304]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f003 030c 	and.w	r3, r3, #12
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d00b      	beq.n	80012d2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80012ba:	4b49      	ldr	r3, [pc, #292]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f003 030c 	and.w	r3, r3, #12
 80012c2:	2b08      	cmp	r3, #8
 80012c4:	d11c      	bne.n	8001300 <HAL_RCC_OscConfig+0x18c>
 80012c6:	4b46      	ldr	r3, [pc, #280]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d116      	bne.n	8001300 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012d2:	4b43      	ldr	r3, [pc, #268]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d005      	beq.n	80012ea <HAL_RCC_OscConfig+0x176>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	691b      	ldr	r3, [r3, #16]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d001      	beq.n	80012ea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e1c0      	b.n	800166c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ea:	4b3d      	ldr	r3, [pc, #244]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	695b      	ldr	r3, [r3, #20]
 80012f6:	00db      	lsls	r3, r3, #3
 80012f8:	4939      	ldr	r1, [pc, #228]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 80012fa:	4313      	orrs	r3, r2
 80012fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012fe:	e03a      	b.n	8001376 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	691b      	ldr	r3, [r3, #16]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d020      	beq.n	800134a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001308:	4b36      	ldr	r3, [pc, #216]	@ (80013e4 <HAL_RCC_OscConfig+0x270>)
 800130a:	2201      	movs	r2, #1
 800130c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800130e:	f7ff f9b5 	bl	800067c <HAL_GetTick>
 8001312:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001314:	e008      	b.n	8001328 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001316:	f7ff f9b1 	bl	800067c <HAL_GetTick>
 800131a:	4602      	mov	r2, r0
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	2b02      	cmp	r3, #2
 8001322:	d901      	bls.n	8001328 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001324:	2303      	movs	r3, #3
 8001326:	e1a1      	b.n	800166c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001328:	4b2d      	ldr	r3, [pc, #180]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 0302 	and.w	r3, r3, #2
 8001330:	2b00      	cmp	r3, #0
 8001332:	d0f0      	beq.n	8001316 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001334:	4b2a      	ldr	r3, [pc, #168]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	695b      	ldr	r3, [r3, #20]
 8001340:	00db      	lsls	r3, r3, #3
 8001342:	4927      	ldr	r1, [pc, #156]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 8001344:	4313      	orrs	r3, r2
 8001346:	600b      	str	r3, [r1, #0]
 8001348:	e015      	b.n	8001376 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800134a:	4b26      	ldr	r3, [pc, #152]	@ (80013e4 <HAL_RCC_OscConfig+0x270>)
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001350:	f7ff f994 	bl	800067c <HAL_GetTick>
 8001354:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001356:	e008      	b.n	800136a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001358:	f7ff f990 	bl	800067c <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b02      	cmp	r3, #2
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e180      	b.n	800166c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800136a:	4b1d      	ldr	r3, [pc, #116]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	2b00      	cmp	r3, #0
 8001374:	d1f0      	bne.n	8001358 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0308 	and.w	r3, r3, #8
 800137e:	2b00      	cmp	r3, #0
 8001380:	d03a      	beq.n	80013f8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	699b      	ldr	r3, [r3, #24]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d019      	beq.n	80013be <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800138a:	4b17      	ldr	r3, [pc, #92]	@ (80013e8 <HAL_RCC_OscConfig+0x274>)
 800138c:	2201      	movs	r2, #1
 800138e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001390:	f7ff f974 	bl	800067c <HAL_GetTick>
 8001394:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001396:	e008      	b.n	80013aa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001398:	f7ff f970 	bl	800067c <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e160      	b.n	800166c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013aa:	4b0d      	ldr	r3, [pc, #52]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 80013ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d0f0      	beq.n	8001398 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80013b6:	2001      	movs	r0, #1
 80013b8:	f000 face 	bl	8001958 <RCC_Delay>
 80013bc:	e01c      	b.n	80013f8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013be:	4b0a      	ldr	r3, [pc, #40]	@ (80013e8 <HAL_RCC_OscConfig+0x274>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013c4:	f7ff f95a 	bl	800067c <HAL_GetTick>
 80013c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013ca:	e00f      	b.n	80013ec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013cc:	f7ff f956 	bl	800067c <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d908      	bls.n	80013ec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e146      	b.n	800166c <HAL_RCC_OscConfig+0x4f8>
 80013de:	bf00      	nop
 80013e0:	40021000 	.word	0x40021000
 80013e4:	42420000 	.word	0x42420000
 80013e8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013ec:	4b92      	ldr	r3, [pc, #584]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 80013ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013f0:	f003 0302 	and.w	r3, r3, #2
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d1e9      	bne.n	80013cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 0304 	and.w	r3, r3, #4
 8001400:	2b00      	cmp	r3, #0
 8001402:	f000 80a6 	beq.w	8001552 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001406:	2300      	movs	r3, #0
 8001408:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800140a:	4b8b      	ldr	r3, [pc, #556]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 800140c:	69db      	ldr	r3, [r3, #28]
 800140e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d10d      	bne.n	8001432 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001416:	4b88      	ldr	r3, [pc, #544]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 8001418:	69db      	ldr	r3, [r3, #28]
 800141a:	4a87      	ldr	r2, [pc, #540]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 800141c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001420:	61d3      	str	r3, [r2, #28]
 8001422:	4b85      	ldr	r3, [pc, #532]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 8001424:	69db      	ldr	r3, [r3, #28]
 8001426:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800142a:	60bb      	str	r3, [r7, #8]
 800142c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800142e:	2301      	movs	r3, #1
 8001430:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001432:	4b82      	ldr	r3, [pc, #520]	@ (800163c <HAL_RCC_OscConfig+0x4c8>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800143a:	2b00      	cmp	r3, #0
 800143c:	d118      	bne.n	8001470 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800143e:	4b7f      	ldr	r3, [pc, #508]	@ (800163c <HAL_RCC_OscConfig+0x4c8>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a7e      	ldr	r2, [pc, #504]	@ (800163c <HAL_RCC_OscConfig+0x4c8>)
 8001444:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001448:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800144a:	f7ff f917 	bl	800067c <HAL_GetTick>
 800144e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001450:	e008      	b.n	8001464 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001452:	f7ff f913 	bl	800067c <HAL_GetTick>
 8001456:	4602      	mov	r2, r0
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	2b64      	cmp	r3, #100	@ 0x64
 800145e:	d901      	bls.n	8001464 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001460:	2303      	movs	r3, #3
 8001462:	e103      	b.n	800166c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001464:	4b75      	ldr	r3, [pc, #468]	@ (800163c <HAL_RCC_OscConfig+0x4c8>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800146c:	2b00      	cmp	r3, #0
 800146e:	d0f0      	beq.n	8001452 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d106      	bne.n	8001486 <HAL_RCC_OscConfig+0x312>
 8001478:	4b6f      	ldr	r3, [pc, #444]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 800147a:	6a1b      	ldr	r3, [r3, #32]
 800147c:	4a6e      	ldr	r2, [pc, #440]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 800147e:	f043 0301 	orr.w	r3, r3, #1
 8001482:	6213      	str	r3, [r2, #32]
 8001484:	e02d      	b.n	80014e2 <HAL_RCC_OscConfig+0x36e>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	68db      	ldr	r3, [r3, #12]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d10c      	bne.n	80014a8 <HAL_RCC_OscConfig+0x334>
 800148e:	4b6a      	ldr	r3, [pc, #424]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 8001490:	6a1b      	ldr	r3, [r3, #32]
 8001492:	4a69      	ldr	r2, [pc, #420]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 8001494:	f023 0301 	bic.w	r3, r3, #1
 8001498:	6213      	str	r3, [r2, #32]
 800149a:	4b67      	ldr	r3, [pc, #412]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 800149c:	6a1b      	ldr	r3, [r3, #32]
 800149e:	4a66      	ldr	r2, [pc, #408]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 80014a0:	f023 0304 	bic.w	r3, r3, #4
 80014a4:	6213      	str	r3, [r2, #32]
 80014a6:	e01c      	b.n	80014e2 <HAL_RCC_OscConfig+0x36e>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	2b05      	cmp	r3, #5
 80014ae:	d10c      	bne.n	80014ca <HAL_RCC_OscConfig+0x356>
 80014b0:	4b61      	ldr	r3, [pc, #388]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 80014b2:	6a1b      	ldr	r3, [r3, #32]
 80014b4:	4a60      	ldr	r2, [pc, #384]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 80014b6:	f043 0304 	orr.w	r3, r3, #4
 80014ba:	6213      	str	r3, [r2, #32]
 80014bc:	4b5e      	ldr	r3, [pc, #376]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 80014be:	6a1b      	ldr	r3, [r3, #32]
 80014c0:	4a5d      	ldr	r2, [pc, #372]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 80014c2:	f043 0301 	orr.w	r3, r3, #1
 80014c6:	6213      	str	r3, [r2, #32]
 80014c8:	e00b      	b.n	80014e2 <HAL_RCC_OscConfig+0x36e>
 80014ca:	4b5b      	ldr	r3, [pc, #364]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 80014cc:	6a1b      	ldr	r3, [r3, #32]
 80014ce:	4a5a      	ldr	r2, [pc, #360]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 80014d0:	f023 0301 	bic.w	r3, r3, #1
 80014d4:	6213      	str	r3, [r2, #32]
 80014d6:	4b58      	ldr	r3, [pc, #352]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 80014d8:	6a1b      	ldr	r3, [r3, #32]
 80014da:	4a57      	ldr	r2, [pc, #348]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 80014dc:	f023 0304 	bic.w	r3, r3, #4
 80014e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d015      	beq.n	8001516 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ea:	f7ff f8c7 	bl	800067c <HAL_GetTick>
 80014ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014f0:	e00a      	b.n	8001508 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014f2:	f7ff f8c3 	bl	800067c <HAL_GetTick>
 80014f6:	4602      	mov	r2, r0
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001500:	4293      	cmp	r3, r2
 8001502:	d901      	bls.n	8001508 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001504:	2303      	movs	r3, #3
 8001506:	e0b1      	b.n	800166c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001508:	4b4b      	ldr	r3, [pc, #300]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 800150a:	6a1b      	ldr	r3, [r3, #32]
 800150c:	f003 0302 	and.w	r3, r3, #2
 8001510:	2b00      	cmp	r3, #0
 8001512:	d0ee      	beq.n	80014f2 <HAL_RCC_OscConfig+0x37e>
 8001514:	e014      	b.n	8001540 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001516:	f7ff f8b1 	bl	800067c <HAL_GetTick>
 800151a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800151c:	e00a      	b.n	8001534 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800151e:	f7ff f8ad 	bl	800067c <HAL_GetTick>
 8001522:	4602      	mov	r2, r0
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	f241 3288 	movw	r2, #5000	@ 0x1388
 800152c:	4293      	cmp	r3, r2
 800152e:	d901      	bls.n	8001534 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	e09b      	b.n	800166c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001534:	4b40      	ldr	r3, [pc, #256]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 8001536:	6a1b      	ldr	r3, [r3, #32]
 8001538:	f003 0302 	and.w	r3, r3, #2
 800153c:	2b00      	cmp	r3, #0
 800153e:	d1ee      	bne.n	800151e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001540:	7dfb      	ldrb	r3, [r7, #23]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d105      	bne.n	8001552 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001546:	4b3c      	ldr	r3, [pc, #240]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 8001548:	69db      	ldr	r3, [r3, #28]
 800154a:	4a3b      	ldr	r2, [pc, #236]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 800154c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001550:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	69db      	ldr	r3, [r3, #28]
 8001556:	2b00      	cmp	r3, #0
 8001558:	f000 8087 	beq.w	800166a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800155c:	4b36      	ldr	r3, [pc, #216]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f003 030c 	and.w	r3, r3, #12
 8001564:	2b08      	cmp	r3, #8
 8001566:	d061      	beq.n	800162c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	69db      	ldr	r3, [r3, #28]
 800156c:	2b02      	cmp	r3, #2
 800156e:	d146      	bne.n	80015fe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001570:	4b33      	ldr	r3, [pc, #204]	@ (8001640 <HAL_RCC_OscConfig+0x4cc>)
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001576:	f7ff f881 	bl	800067c <HAL_GetTick>
 800157a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800157c:	e008      	b.n	8001590 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800157e:	f7ff f87d 	bl	800067c <HAL_GetTick>
 8001582:	4602      	mov	r2, r0
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	2b02      	cmp	r3, #2
 800158a:	d901      	bls.n	8001590 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e06d      	b.n	800166c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001590:	4b29      	ldr	r3, [pc, #164]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d1f0      	bne.n	800157e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6a1b      	ldr	r3, [r3, #32]
 80015a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015a4:	d108      	bne.n	80015b8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015a6:	4b24      	ldr	r3, [pc, #144]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	4921      	ldr	r1, [pc, #132]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 80015b4:	4313      	orrs	r3, r2
 80015b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6a19      	ldr	r1, [r3, #32]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015c8:	430b      	orrs	r3, r1
 80015ca:	491b      	ldr	r1, [pc, #108]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 80015cc:	4313      	orrs	r3, r2
 80015ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001640 <HAL_RCC_OscConfig+0x4cc>)
 80015d2:	2201      	movs	r2, #1
 80015d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d6:	f7ff f851 	bl	800067c <HAL_GetTick>
 80015da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015dc:	e008      	b.n	80015f0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015de:	f7ff f84d 	bl	800067c <HAL_GetTick>
 80015e2:	4602      	mov	r2, r0
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d901      	bls.n	80015f0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	e03d      	b.n	800166c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015f0:	4b11      	ldr	r3, [pc, #68]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d0f0      	beq.n	80015de <HAL_RCC_OscConfig+0x46a>
 80015fc:	e035      	b.n	800166a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015fe:	4b10      	ldr	r3, [pc, #64]	@ (8001640 <HAL_RCC_OscConfig+0x4cc>)
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001604:	f7ff f83a 	bl	800067c <HAL_GetTick>
 8001608:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800160a:	e008      	b.n	800161e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800160c:	f7ff f836 	bl	800067c <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b02      	cmp	r3, #2
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e026      	b.n	800166c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800161e:	4b06      	ldr	r3, [pc, #24]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d1f0      	bne.n	800160c <HAL_RCC_OscConfig+0x498>
 800162a:	e01e      	b.n	800166a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	69db      	ldr	r3, [r3, #28]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d107      	bne.n	8001644 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e019      	b.n	800166c <HAL_RCC_OscConfig+0x4f8>
 8001638:	40021000 	.word	0x40021000
 800163c:	40007000 	.word	0x40007000
 8001640:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001644:	4b0b      	ldr	r3, [pc, #44]	@ (8001674 <HAL_RCC_OscConfig+0x500>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6a1b      	ldr	r3, [r3, #32]
 8001654:	429a      	cmp	r2, r3
 8001656:	d106      	bne.n	8001666 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001662:	429a      	cmp	r2, r3
 8001664:	d001      	beq.n	800166a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e000      	b.n	800166c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800166a:	2300      	movs	r3, #0
}
 800166c:	4618      	mov	r0, r3
 800166e:	3718      	adds	r7, #24
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	40021000 	.word	0x40021000

08001678 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d101      	bne.n	800168c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e0d0      	b.n	800182e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800168c:	4b6a      	ldr	r3, [pc, #424]	@ (8001838 <HAL_RCC_ClockConfig+0x1c0>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0307 	and.w	r3, r3, #7
 8001694:	683a      	ldr	r2, [r7, #0]
 8001696:	429a      	cmp	r2, r3
 8001698:	d910      	bls.n	80016bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800169a:	4b67      	ldr	r3, [pc, #412]	@ (8001838 <HAL_RCC_ClockConfig+0x1c0>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f023 0207 	bic.w	r2, r3, #7
 80016a2:	4965      	ldr	r1, [pc, #404]	@ (8001838 <HAL_RCC_ClockConfig+0x1c0>)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016aa:	4b63      	ldr	r3, [pc, #396]	@ (8001838 <HAL_RCC_ClockConfig+0x1c0>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0307 	and.w	r3, r3, #7
 80016b2:	683a      	ldr	r2, [r7, #0]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d001      	beq.n	80016bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e0b8      	b.n	800182e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d020      	beq.n	800170a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0304 	and.w	r3, r3, #4
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d005      	beq.n	80016e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016d4:	4b59      	ldr	r3, [pc, #356]	@ (800183c <HAL_RCC_ClockConfig+0x1c4>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	4a58      	ldr	r2, [pc, #352]	@ (800183c <HAL_RCC_ClockConfig+0x1c4>)
 80016da:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80016de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0308 	and.w	r3, r3, #8
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d005      	beq.n	80016f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016ec:	4b53      	ldr	r3, [pc, #332]	@ (800183c <HAL_RCC_ClockConfig+0x1c4>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	4a52      	ldr	r2, [pc, #328]	@ (800183c <HAL_RCC_ClockConfig+0x1c4>)
 80016f2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80016f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016f8:	4b50      	ldr	r3, [pc, #320]	@ (800183c <HAL_RCC_ClockConfig+0x1c4>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	494d      	ldr	r1, [pc, #308]	@ (800183c <HAL_RCC_ClockConfig+0x1c4>)
 8001706:	4313      	orrs	r3, r2
 8001708:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	2b00      	cmp	r3, #0
 8001714:	d040      	beq.n	8001798 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	2b01      	cmp	r3, #1
 800171c:	d107      	bne.n	800172e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800171e:	4b47      	ldr	r3, [pc, #284]	@ (800183c <HAL_RCC_ClockConfig+0x1c4>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d115      	bne.n	8001756 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e07f      	b.n	800182e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	2b02      	cmp	r3, #2
 8001734:	d107      	bne.n	8001746 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001736:	4b41      	ldr	r3, [pc, #260]	@ (800183c <HAL_RCC_ClockConfig+0x1c4>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d109      	bne.n	8001756 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e073      	b.n	800182e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001746:	4b3d      	ldr	r3, [pc, #244]	@ (800183c <HAL_RCC_ClockConfig+0x1c4>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	2b00      	cmp	r3, #0
 8001750:	d101      	bne.n	8001756 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e06b      	b.n	800182e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001756:	4b39      	ldr	r3, [pc, #228]	@ (800183c <HAL_RCC_ClockConfig+0x1c4>)
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f023 0203 	bic.w	r2, r3, #3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	4936      	ldr	r1, [pc, #216]	@ (800183c <HAL_RCC_ClockConfig+0x1c4>)
 8001764:	4313      	orrs	r3, r2
 8001766:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001768:	f7fe ff88 	bl	800067c <HAL_GetTick>
 800176c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800176e:	e00a      	b.n	8001786 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001770:	f7fe ff84 	bl	800067c <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800177e:	4293      	cmp	r3, r2
 8001780:	d901      	bls.n	8001786 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e053      	b.n	800182e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001786:	4b2d      	ldr	r3, [pc, #180]	@ (800183c <HAL_RCC_ClockConfig+0x1c4>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f003 020c 	and.w	r2, r3, #12
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	429a      	cmp	r2, r3
 8001796:	d1eb      	bne.n	8001770 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001798:	4b27      	ldr	r3, [pc, #156]	@ (8001838 <HAL_RCC_ClockConfig+0x1c0>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0307 	and.w	r3, r3, #7
 80017a0:	683a      	ldr	r2, [r7, #0]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d210      	bcs.n	80017c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017a6:	4b24      	ldr	r3, [pc, #144]	@ (8001838 <HAL_RCC_ClockConfig+0x1c0>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f023 0207 	bic.w	r2, r3, #7
 80017ae:	4922      	ldr	r1, [pc, #136]	@ (8001838 <HAL_RCC_ClockConfig+0x1c0>)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017b6:	4b20      	ldr	r3, [pc, #128]	@ (8001838 <HAL_RCC_ClockConfig+0x1c0>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0307 	and.w	r3, r3, #7
 80017be:	683a      	ldr	r2, [r7, #0]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d001      	beq.n	80017c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e032      	b.n	800182e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0304 	and.w	r3, r3, #4
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d008      	beq.n	80017e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017d4:	4b19      	ldr	r3, [pc, #100]	@ (800183c <HAL_RCC_ClockConfig+0x1c4>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	4916      	ldr	r1, [pc, #88]	@ (800183c <HAL_RCC_ClockConfig+0x1c4>)
 80017e2:	4313      	orrs	r3, r2
 80017e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0308 	and.w	r3, r3, #8
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d009      	beq.n	8001806 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017f2:	4b12      	ldr	r3, [pc, #72]	@ (800183c <HAL_RCC_ClockConfig+0x1c4>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	691b      	ldr	r3, [r3, #16]
 80017fe:	00db      	lsls	r3, r3, #3
 8001800:	490e      	ldr	r1, [pc, #56]	@ (800183c <HAL_RCC_ClockConfig+0x1c4>)
 8001802:	4313      	orrs	r3, r2
 8001804:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001806:	f000 f821 	bl	800184c <HAL_RCC_GetSysClockFreq>
 800180a:	4602      	mov	r2, r0
 800180c:	4b0b      	ldr	r3, [pc, #44]	@ (800183c <HAL_RCC_ClockConfig+0x1c4>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	091b      	lsrs	r3, r3, #4
 8001812:	f003 030f 	and.w	r3, r3, #15
 8001816:	490a      	ldr	r1, [pc, #40]	@ (8001840 <HAL_RCC_ClockConfig+0x1c8>)
 8001818:	5ccb      	ldrb	r3, [r1, r3]
 800181a:	fa22 f303 	lsr.w	r3, r2, r3
 800181e:	4a09      	ldr	r2, [pc, #36]	@ (8001844 <HAL_RCC_ClockConfig+0x1cc>)
 8001820:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001822:	4b09      	ldr	r3, [pc, #36]	@ (8001848 <HAL_RCC_ClockConfig+0x1d0>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4618      	mov	r0, r3
 8001828:	f7fe fee6 	bl	80005f8 <HAL_InitTick>

  return HAL_OK;
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	3710      	adds	r7, #16
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40022000 	.word	0x40022000
 800183c:	40021000 	.word	0x40021000
 8001840:	08002bc4 	.word	0x08002bc4
 8001844:	20000000 	.word	0x20000000
 8001848:	20000004 	.word	0x20000004

0800184c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800184c:	b480      	push	{r7}
 800184e:	b087      	sub	sp, #28
 8001850:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001852:	2300      	movs	r3, #0
 8001854:	60fb      	str	r3, [r7, #12]
 8001856:	2300      	movs	r3, #0
 8001858:	60bb      	str	r3, [r7, #8]
 800185a:	2300      	movs	r3, #0
 800185c:	617b      	str	r3, [r7, #20]
 800185e:	2300      	movs	r3, #0
 8001860:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001862:	2300      	movs	r3, #0
 8001864:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001866:	4b1e      	ldr	r3, [pc, #120]	@ (80018e0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f003 030c 	and.w	r3, r3, #12
 8001872:	2b04      	cmp	r3, #4
 8001874:	d002      	beq.n	800187c <HAL_RCC_GetSysClockFreq+0x30>
 8001876:	2b08      	cmp	r3, #8
 8001878:	d003      	beq.n	8001882 <HAL_RCC_GetSysClockFreq+0x36>
 800187a:	e027      	b.n	80018cc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800187c:	4b19      	ldr	r3, [pc, #100]	@ (80018e4 <HAL_RCC_GetSysClockFreq+0x98>)
 800187e:	613b      	str	r3, [r7, #16]
      break;
 8001880:	e027      	b.n	80018d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	0c9b      	lsrs	r3, r3, #18
 8001886:	f003 030f 	and.w	r3, r3, #15
 800188a:	4a17      	ldr	r2, [pc, #92]	@ (80018e8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800188c:	5cd3      	ldrb	r3, [r2, r3]
 800188e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d010      	beq.n	80018bc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800189a:	4b11      	ldr	r3, [pc, #68]	@ (80018e0 <HAL_RCC_GetSysClockFreq+0x94>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	0c5b      	lsrs	r3, r3, #17
 80018a0:	f003 0301 	and.w	r3, r3, #1
 80018a4:	4a11      	ldr	r2, [pc, #68]	@ (80018ec <HAL_RCC_GetSysClockFreq+0xa0>)
 80018a6:	5cd3      	ldrb	r3, [r2, r3]
 80018a8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a0d      	ldr	r2, [pc, #52]	@ (80018e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80018ae:	fb03 f202 	mul.w	r2, r3, r2
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80018b8:	617b      	str	r3, [r7, #20]
 80018ba:	e004      	b.n	80018c6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4a0c      	ldr	r2, [pc, #48]	@ (80018f0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80018c0:	fb02 f303 	mul.w	r3, r2, r3
 80018c4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	613b      	str	r3, [r7, #16]
      break;
 80018ca:	e002      	b.n	80018d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80018cc:	4b05      	ldr	r3, [pc, #20]	@ (80018e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80018ce:	613b      	str	r3, [r7, #16]
      break;
 80018d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018d2:	693b      	ldr	r3, [r7, #16]
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	371c      	adds	r7, #28
 80018d8:	46bd      	mov	sp, r7
 80018da:	bc80      	pop	{r7}
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	40021000 	.word	0x40021000
 80018e4:	007a1200 	.word	0x007a1200
 80018e8:	08002bdc 	.word	0x08002bdc
 80018ec:	08002bec 	.word	0x08002bec
 80018f0:	003d0900 	.word	0x003d0900

080018f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018f8:	4b02      	ldr	r3, [pc, #8]	@ (8001904 <HAL_RCC_GetHCLKFreq+0x10>)
 80018fa:	681b      	ldr	r3, [r3, #0]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	46bd      	mov	sp, r7
 8001900:	bc80      	pop	{r7}
 8001902:	4770      	bx	lr
 8001904:	20000000 	.word	0x20000000

08001908 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800190c:	f7ff fff2 	bl	80018f4 <HAL_RCC_GetHCLKFreq>
 8001910:	4602      	mov	r2, r0
 8001912:	4b05      	ldr	r3, [pc, #20]	@ (8001928 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	0a1b      	lsrs	r3, r3, #8
 8001918:	f003 0307 	and.w	r3, r3, #7
 800191c:	4903      	ldr	r1, [pc, #12]	@ (800192c <HAL_RCC_GetPCLK1Freq+0x24>)
 800191e:	5ccb      	ldrb	r3, [r1, r3]
 8001920:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001924:	4618      	mov	r0, r3
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40021000 	.word	0x40021000
 800192c:	08002bd4 	.word	0x08002bd4

08001930 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001934:	f7ff ffde 	bl	80018f4 <HAL_RCC_GetHCLKFreq>
 8001938:	4602      	mov	r2, r0
 800193a:	4b05      	ldr	r3, [pc, #20]	@ (8001950 <HAL_RCC_GetPCLK2Freq+0x20>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	0adb      	lsrs	r3, r3, #11
 8001940:	f003 0307 	and.w	r3, r3, #7
 8001944:	4903      	ldr	r1, [pc, #12]	@ (8001954 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001946:	5ccb      	ldrb	r3, [r1, r3]
 8001948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800194c:	4618      	mov	r0, r3
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40021000 	.word	0x40021000
 8001954:	08002bd4 	.word	0x08002bd4

08001958 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001960:	4b0a      	ldr	r3, [pc, #40]	@ (800198c <RCC_Delay+0x34>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a0a      	ldr	r2, [pc, #40]	@ (8001990 <RCC_Delay+0x38>)
 8001966:	fba2 2303 	umull	r2, r3, r2, r3
 800196a:	0a5b      	lsrs	r3, r3, #9
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	fb02 f303 	mul.w	r3, r2, r3
 8001972:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001974:	bf00      	nop
  }
  while (Delay --);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	1e5a      	subs	r2, r3, #1
 800197a:	60fa      	str	r2, [r7, #12]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d1f9      	bne.n	8001974 <RCC_Delay+0x1c>
}
 8001980:	bf00      	nop
 8001982:	bf00      	nop
 8001984:	3714      	adds	r7, #20
 8001986:	46bd      	mov	sp, r7
 8001988:	bc80      	pop	{r7}
 800198a:	4770      	bx	lr
 800198c:	20000000 	.word	0x20000000
 8001990:	10624dd3 	.word	0x10624dd3

08001994 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d101      	bne.n	80019a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e04d      	b.n	8001a42 <HAL_UART_Init+0xae>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d111      	bne.n	80019d6 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f000 fc14 	bl	80021e8 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d102      	bne.n	80019ce <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	4a20      	ldr	r2, [pc, #128]	@ (8001a4c <HAL_UART_Init+0xb8>)
 80019cc:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2224      	movs	r2, #36	@ 0x24
 80019da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	68da      	ldr	r2, [r3, #12]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80019ec:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f001 f802 	bl	80029f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	691a      	ldr	r2, [r3, #16]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001a02:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	695a      	ldr	r2, [r3, #20]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001a12:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	68da      	ldr	r2, [r3, #12]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001a22:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2220      	movs	r2, #32
 8001a2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2220      	movs	r2, #32
 8001a36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	080003f9 	.word	0x080003f9

08001a50 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b08a      	sub	sp, #40	@ 0x28
 8001a54:	af02      	add	r7, sp, #8
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	603b      	str	r3, [r7, #0]
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001a60:	2300      	movs	r3, #0
 8001a62:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	2b20      	cmp	r3, #32
 8001a6e:	d16d      	bne.n	8001b4c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d002      	beq.n	8001a7c <HAL_UART_Transmit+0x2c>
 8001a76:	88fb      	ldrh	r3, [r7, #6]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d101      	bne.n	8001a80 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e066      	b.n	8001b4e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2200      	movs	r2, #0
 8001a84:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2221      	movs	r2, #33	@ 0x21
 8001a8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001a8e:	f7fe fdf5 	bl	800067c <HAL_GetTick>
 8001a92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	88fa      	ldrh	r2, [r7, #6]
 8001a98:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	88fa      	ldrh	r2, [r7, #6]
 8001a9e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001aa8:	d108      	bne.n	8001abc <HAL_UART_Transmit+0x6c>
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	691b      	ldr	r3, [r3, #16]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d104      	bne.n	8001abc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	61bb      	str	r3, [r7, #24]
 8001aba:	e003      	b.n	8001ac4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001ac4:	e02a      	b.n	8001b1c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	9300      	str	r3, [sp, #0]
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	2200      	movs	r2, #0
 8001ace:	2180      	movs	r1, #128	@ 0x80
 8001ad0:	68f8      	ldr	r0, [r7, #12]
 8001ad2:	f000 fcc2 	bl	800245a <UART_WaitOnFlagUntilTimeout>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e036      	b.n	8001b4e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d10b      	bne.n	8001afe <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	881b      	ldrh	r3, [r3, #0]
 8001aea:	461a      	mov	r2, r3
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001af4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	3302      	adds	r3, #2
 8001afa:	61bb      	str	r3, [r7, #24]
 8001afc:	e007      	b.n	8001b0e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	781a      	ldrb	r2, [r3, #0]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	3b01      	subs	r3, #1
 8001b16:	b29a      	uxth	r2, r3
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d1cf      	bne.n	8001ac6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	9300      	str	r3, [sp, #0]
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	2140      	movs	r1, #64	@ 0x40
 8001b30:	68f8      	ldr	r0, [r7, #12]
 8001b32:	f000 fc92 	bl	800245a <UART_WaitOnFlagUntilTimeout>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e006      	b.n	8001b4e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2220      	movs	r2, #32
 8001b44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	e000      	b.n	8001b4e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001b4c:	2302      	movs	r3, #2
  }
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3720      	adds	r7, #32
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b08c      	sub	sp, #48	@ 0x30
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	60f8      	str	r0, [r7, #12]
 8001b5e:	60b9      	str	r1, [r7, #8]
 8001b60:	4613      	mov	r3, r2
 8001b62:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	2b20      	cmp	r3, #32
 8001b6e:	d14a      	bne.n	8001c06 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d002      	beq.n	8001b7c <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8001b76:	88fb      	ldrh	r3, [r7, #6]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d101      	bne.n	8001b80 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e043      	b.n	8001c08 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2201      	movs	r2, #1
 8001b84:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8001b8c:	88fb      	ldrh	r3, [r7, #6]
 8001b8e:	461a      	mov	r2, r3
 8001b90:	68b9      	ldr	r1, [r7, #8]
 8001b92:	68f8      	ldr	r0, [r7, #12]
 8001b94:	f000 fcd0 	bl	8002538 <UART_Start_Receive_DMA>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8001b9e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d12c      	bne.n	8001c00 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d125      	bne.n	8001bfa <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001bae:	2300      	movs	r3, #0
 8001bb0:	613b      	str	r3, [r7, #16]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	613b      	str	r3, [r7, #16]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	613b      	str	r3, [r7, #16]
 8001bc2:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	330c      	adds	r3, #12
 8001bca:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	e853 3f00 	ldrex	r3, [r3]
 8001bd2:	617b      	str	r3, [r7, #20]
   return(result);
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	f043 0310 	orr.w	r3, r3, #16
 8001bda:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	330c      	adds	r3, #12
 8001be2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001be4:	627a      	str	r2, [r7, #36]	@ 0x24
 8001be6:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001be8:	6a39      	ldr	r1, [r7, #32]
 8001bea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bec:	e841 2300 	strex	r3, r2, [r1]
 8001bf0:	61fb      	str	r3, [r7, #28]
   return(result);
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d1e5      	bne.n	8001bc4 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8001bf8:	e002      	b.n	8001c00 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8001c00:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001c04:	e000      	b.n	8001c08 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8001c06:	2302      	movs	r3, #2
  }
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3730      	adds	r7, #48	@ 0x30
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b0ba      	sub	sp, #232	@ 0xe8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	695b      	ldr	r3, [r3, #20]
 8001c32:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8001c36:	2300      	movs	r3, #0
 8001c38:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001c42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001c46:	f003 030f 	and.w	r3, r3, #15
 8001c4a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8001c4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d10f      	bne.n	8001c76 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001c56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001c5a:	f003 0320 	and.w	r3, r3, #32
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d009      	beq.n	8001c76 <HAL_UART_IRQHandler+0x66>
 8001c62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001c66:	f003 0320 	and.w	r3, r3, #32
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d003      	beq.n	8001c76 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 fe02 	bl	8002878 <UART_Receive_IT>
      return;
 8001c74:	e260      	b.n	8002138 <HAL_UART_IRQHandler+0x528>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001c76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f000 80e1 	beq.w	8001e42 <HAL_UART_IRQHandler+0x232>
 8001c80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001c84:	f003 0301 	and.w	r3, r3, #1
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d106      	bne.n	8001c9a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001c8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001c90:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	f000 80d4 	beq.w	8001e42 <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001c9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d00b      	beq.n	8001cbe <HAL_UART_IRQHandler+0xae>
 8001ca6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001caa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d005      	beq.n	8001cbe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cb6:	f043 0201 	orr.w	r2, r3, #1
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001cc2:	f003 0304 	and.w	r3, r3, #4
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d00b      	beq.n	8001ce2 <HAL_UART_IRQHandler+0xd2>
 8001cca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d005      	beq.n	8001ce2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cda:	f043 0202 	orr.w	r2, r3, #2
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d00b      	beq.n	8001d06 <HAL_UART_IRQHandler+0xf6>
 8001cee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d005      	beq.n	8001d06 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cfe:	f043 0204 	orr.w	r2, r3, #4
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001d06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001d0a:	f003 0308 	and.w	r3, r3, #8
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d011      	beq.n	8001d36 <HAL_UART_IRQHandler+0x126>
 8001d12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001d16:	f003 0320 	and.w	r3, r3, #32
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d105      	bne.n	8001d2a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001d1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d005      	beq.n	8001d36 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d2e:	f043 0208 	orr.w	r2, r3, #8
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	f000 81f7 	beq.w	800212e <HAL_UART_IRQHandler+0x51e>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001d40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001d44:	f003 0320 	and.w	r3, r3, #32
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d008      	beq.n	8001d5e <HAL_UART_IRQHandler+0x14e>
 8001d4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001d50:	f003 0320 	and.w	r3, r3, #32
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d002      	beq.n	8001d5e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f000 fd8d 	bl	8002878 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	695b      	ldr	r3, [r3, #20]
 8001d64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	bf14      	ite	ne
 8001d6c:	2301      	movne	r3, #1
 8001d6e:	2300      	moveq	r3, #0
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d7a:	f003 0308 	and.w	r3, r3, #8
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d103      	bne.n	8001d8a <HAL_UART_IRQHandler+0x17a>
 8001d82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d051      	beq.n	8001e2e <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 fc95 	bl	80026ba <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	695b      	ldr	r3, [r3, #20]
 8001d96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d042      	beq.n	8001e24 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	3314      	adds	r3, #20
 8001da4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001da8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001dac:	e853 3f00 	ldrex	r3, [r3]
 8001db0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8001db4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001db8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001dbc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	3314      	adds	r3, #20
 8001dc6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8001dca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8001dce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001dd2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8001dd6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001dda:	e841 2300 	strex	r3, r2, [r1]
 8001dde:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8001de2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d1d9      	bne.n	8001d9e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d013      	beq.n	8001e1a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001df6:	4a80      	ldr	r2, [pc, #512]	@ (8001ff8 <HAL_UART_IRQHandler+0x3e8>)
 8001df8:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7fe fe6e 	bl	8000ae0 <HAL_DMA_Abort_IT>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d019      	beq.n	8001e3e <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001e14:	4610      	mov	r0, r2
 8001e16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e18:	e011      	b.n	8001e3e <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e22:	e00c      	b.n	8001e3e <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e2c:	e007      	b.n	8001e3e <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8001e3c:	e177      	b.n	800212e <HAL_UART_IRQHandler+0x51e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e3e:	bf00      	nop
    return;
 8001e40:	e175      	b.n	800212e <HAL_UART_IRQHandler+0x51e>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	f040 8151 	bne.w	80020ee <HAL_UART_IRQHandler+0x4de>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001e4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001e50:	f003 0310 	and.w	r3, r3, #16
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	f000 814a 	beq.w	80020ee <HAL_UART_IRQHandler+0x4de>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001e5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001e5e:	f003 0310 	and.w	r3, r3, #16
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f000 8143 	beq.w	80020ee <HAL_UART_IRQHandler+0x4de>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001e68:	2300      	movs	r3, #0
 8001e6a:	60bb      	str	r3, [r7, #8]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	60bb      	str	r3, [r7, #8]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	60bb      	str	r3, [r7, #8]
 8001e7c:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	695b      	ldr	r3, [r3, #20]
 8001e84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	f000 80b7 	beq.w	8001ffc <HAL_UART_IRQHandler+0x3ec>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001e9a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	f000 8147 	beq.w	8002132 <HAL_UART_IRQHandler+0x522>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001ea8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001eac:	429a      	cmp	r2, r3
 8001eae:	f080 8140 	bcs.w	8002132 <HAL_UART_IRQHandler+0x522>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001eb8:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ebe:	699b      	ldr	r3, [r3, #24]
 8001ec0:	2b20      	cmp	r3, #32
 8001ec2:	f000 8088 	beq.w	8001fd6 <HAL_UART_IRQHandler+0x3c6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	330c      	adds	r3, #12
 8001ecc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ed0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001ed4:	e853 3f00 	ldrex	r3, [r3]
 8001ed8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8001edc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001ee0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ee4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	330c      	adds	r3, #12
 8001eee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8001ef2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001ef6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001efa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8001efe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001f02:	e841 2300 	strex	r3, r2, [r1]
 8001f06:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8001f0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d1d9      	bne.n	8001ec6 <HAL_UART_IRQHandler+0x2b6>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	3314      	adds	r3, #20
 8001f18:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f1a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001f1c:	e853 3f00 	ldrex	r3, [r3]
 8001f20:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8001f22:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001f24:	f023 0301 	bic.w	r3, r3, #1
 8001f28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	3314      	adds	r3, #20
 8001f32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001f36:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8001f3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f3c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8001f3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001f42:	e841 2300 	strex	r3, r2, [r1]
 8001f46:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8001f48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d1e1      	bne.n	8001f12 <HAL_UART_IRQHandler+0x302>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	3314      	adds	r3, #20
 8001f54:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001f58:	e853 3f00 	ldrex	r3, [r3]
 8001f5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8001f5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001f60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001f64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	3314      	adds	r3, #20
 8001f6e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001f72:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001f74:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f76:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8001f78:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001f7a:	e841 2300 	strex	r3, r2, [r1]
 8001f7e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8001f80:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d1e3      	bne.n	8001f4e <HAL_UART_IRQHandler+0x33e>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2220      	movs	r2, #32
 8001f8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	330c      	adds	r3, #12
 8001f9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001f9e:	e853 3f00 	ldrex	r3, [r3]
 8001fa2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8001fa4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001fa6:	f023 0310 	bic.w	r3, r3, #16
 8001faa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	330c      	adds	r3, #12
 8001fb4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8001fb8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001fba:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fbc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001fbe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001fc0:	e841 2300 	strex	r3, r2, [r1]
 8001fc4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8001fc6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d1e3      	bne.n	8001f94 <HAL_UART_IRQHandler+0x384>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7fe fd49 	bl	8000a68 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2202      	movs	r2, #2
 8001fda:	635a      	str	r2, [r3, #52]	@ 0x34

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	8d91      	ldrh	r1, [r2, #44]	@ 0x2c
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	8dd2      	ldrh	r2, [r2, #46]	@ 0x2e
 8001fe8:	b292      	uxth	r2, r2
 8001fea:	1a8a      	subs	r2, r1, r2
 8001fec:	b292      	uxth	r2, r2
 8001fee:	4611      	mov	r1, r2
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001ff4:	e09d      	b.n	8002132 <HAL_UART_IRQHandler+0x522>
 8001ff6:	bf00      	nop
 8001ff8:	0800277f 	.word	0x0800277f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002004:	b29b      	uxth	r3, r3
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002010:	b29b      	uxth	r3, r3
 8002012:	2b00      	cmp	r3, #0
 8002014:	f000 808f 	beq.w	8002136 <HAL_UART_IRQHandler+0x526>
          && (nb_rx_data > 0U))
 8002018:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800201c:	2b00      	cmp	r3, #0
 800201e:	f000 808a 	beq.w	8002136 <HAL_UART_IRQHandler+0x526>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	330c      	adds	r3, #12
 8002028:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800202a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800202c:	e853 3f00 	ldrex	r3, [r3]
 8002030:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002032:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002034:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002038:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	330c      	adds	r3, #12
 8002042:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002046:	647a      	str	r2, [r7, #68]	@ 0x44
 8002048:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800204a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800204c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800204e:	e841 2300 	strex	r3, r2, [r1]
 8002052:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002054:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1e3      	bne.n	8002022 <HAL_UART_IRQHandler+0x412>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	3314      	adds	r3, #20
 8002060:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002064:	e853 3f00 	ldrex	r3, [r3]
 8002068:	623b      	str	r3, [r7, #32]
   return(result);
 800206a:	6a3b      	ldr	r3, [r7, #32]
 800206c:	f023 0301 	bic.w	r3, r3, #1
 8002070:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	3314      	adds	r3, #20
 800207a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800207e:	633a      	str	r2, [r7, #48]	@ 0x30
 8002080:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002082:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002084:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002086:	e841 2300 	strex	r3, r2, [r1]
 800208a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800208c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1e3      	bne.n	800205a <HAL_UART_IRQHandler+0x44a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2220      	movs	r2, #32
 8002096:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	330c      	adds	r3, #12
 80020a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	e853 3f00 	ldrex	r3, [r3]
 80020ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f023 0310 	bic.w	r3, r3, #16
 80020b6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	330c      	adds	r3, #12
 80020c0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80020c4:	61fa      	str	r2, [r7, #28]
 80020c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020c8:	69b9      	ldr	r1, [r7, #24]
 80020ca:	69fa      	ldr	r2, [r7, #28]
 80020cc:	e841 2300 	strex	r3, r2, [r1]
 80020d0:	617b      	str	r3, [r7, #20]
   return(result);
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d1e3      	bne.n	80020a0 <HAL_UART_IRQHandler+0x490>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2202      	movs	r2, #2
 80020dc:	635a      	str	r2, [r3, #52]	@ 0x34

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020e2:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 80020e6:	4611      	mov	r1, r2
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80020ec:	e023      	b.n	8002136 <HAL_UART_IRQHandler+0x526>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80020ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80020f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d009      	beq.n	800210e <HAL_UART_IRQHandler+0x4fe>
 80020fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80020fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002102:	2b00      	cmp	r3, #0
 8002104:	d003      	beq.n	800210e <HAL_UART_IRQHandler+0x4fe>
  {
    UART_Transmit_IT(huart);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f000 fb4e 	bl	80027a8 <UART_Transmit_IT>
    return;
 800210c:	e014      	b.n	8002138 <HAL_UART_IRQHandler+0x528>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800210e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002112:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002116:	2b00      	cmp	r3, #0
 8002118:	d00e      	beq.n	8002138 <HAL_UART_IRQHandler+0x528>
 800211a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800211e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002122:	2b00      	cmp	r3, #0
 8002124:	d008      	beq.n	8002138 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 fb8d 	bl	8002846 <UART_EndTransmit_IT>
    return;
 800212c:	e004      	b.n	8002138 <HAL_UART_IRQHandler+0x528>
    return;
 800212e:	bf00      	nop
 8002130:	e002      	b.n	8002138 <HAL_UART_IRQHandler+0x528>
      return;
 8002132:	bf00      	nop
 8002134:	e000      	b.n	8002138 <HAL_UART_IRQHandler+0x528>
      return;
 8002136:	bf00      	nop
  }
}
 8002138:	37e8      	adds	r7, #232	@ 0xe8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop

08002140 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	bc80      	pop	{r7}
 8002150:	4770      	bx	lr

08002152 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002152:	b480      	push	{r7}
 8002154:	b083      	sub	sp, #12
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800215a:	bf00      	nop
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	bc80      	pop	{r7}
 8002162:	4770      	bx	lr

08002164 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800216c:	bf00      	nop
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	bc80      	pop	{r7}
 8002174:	4770      	bx	lr

08002176 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002176:	b480      	push	{r7}
 8002178:	b083      	sub	sp, #12
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800217e:	bf00      	nop
 8002180:	370c      	adds	r7, #12
 8002182:	46bd      	mov	sp, r7
 8002184:	bc80      	pop	{r7}
 8002186:	4770      	bx	lr

08002188 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	bc80      	pop	{r7}
 8002198:	4770      	bx	lr

0800219a <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800219a:	b480      	push	{r7}
 800219c:	b083      	sub	sp, #12
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80021a2:	bf00      	nop
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bc80      	pop	{r7}
 80021aa:	4770      	bx	lr

080021ac <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bc80      	pop	{r7}
 80021bc:	4770      	bx	lr

080021be <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80021be:	b480      	push	{r7}
 80021c0:	b083      	sub	sp, #12
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80021c6:	bf00      	nop
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bc80      	pop	{r7}
 80021ce:	4770      	bx	lr

080021d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	460b      	mov	r3, r1
 80021da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bc80      	pop	{r7}
 80021e4:	4770      	bx	lr
	...

080021e8 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4a0f      	ldr	r2, [pc, #60]	@ (8002230 <UART_InitCallbacksToDefault+0x48>)
 80021f4:	649a      	str	r2, [r3, #72]	@ 0x48
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a0e      	ldr	r2, [pc, #56]	@ (8002234 <UART_InitCallbacksToDefault+0x4c>)
 80021fa:	64da      	str	r2, [r3, #76]	@ 0x4c
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4a0e      	ldr	r2, [pc, #56]	@ (8002238 <UART_InitCallbacksToDefault+0x50>)
 8002200:	651a      	str	r2, [r3, #80]	@ 0x50
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a0d      	ldr	r2, [pc, #52]	@ (800223c <UART_InitCallbacksToDefault+0x54>)
 8002206:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a0d      	ldr	r2, [pc, #52]	@ (8002240 <UART_InitCallbacksToDefault+0x58>)
 800220c:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a0c      	ldr	r2, [pc, #48]	@ (8002244 <UART_InitCallbacksToDefault+0x5c>)
 8002212:	65da      	str	r2, [r3, #92]	@ 0x5c
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4a0c      	ldr	r2, [pc, #48]	@ (8002248 <UART_InitCallbacksToDefault+0x60>)
 8002218:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a0b      	ldr	r2, [pc, #44]	@ (800224c <UART_InitCallbacksToDefault+0x64>)
 800221e:	665a      	str	r2, [r3, #100]	@ 0x64
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	4a0b      	ldr	r2, [pc, #44]	@ (8002250 <UART_InitCallbacksToDefault+0x68>)
 8002224:	66da      	str	r2, [r3, #108]	@ 0x6c

}
 8002226:	bf00      	nop
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	bc80      	pop	{r7}
 800222e:	4770      	bx	lr
 8002230:	08002153 	.word	0x08002153
 8002234:	08002141 	.word	0x08002141
 8002238:	08002177 	.word	0x08002177
 800223c:	08002165 	.word	0x08002165
 8002240:	08002189 	.word	0x08002189
 8002244:	0800219b 	.word	0x0800219b
 8002248:	080021ad 	.word	0x080021ad
 800224c:	080021bf 	.word	0x080021bf
 8002250:	080021d1 	.word	0x080021d1

08002254 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b09c      	sub	sp, #112	@ 0x70
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002260:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0320 	and.w	r3, r3, #32
 800226c:	2b00      	cmp	r3, #0
 800226e:	d172      	bne.n	8002356 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8002270:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002272:	2200      	movs	r2, #0
 8002274:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002276:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	330c      	adds	r3, #12
 800227c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800227e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002280:	e853 3f00 	ldrex	r3, [r3]
 8002284:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002286:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002288:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800228c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800228e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	330c      	adds	r3, #12
 8002294:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002296:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002298:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800229a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800229c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800229e:	e841 2300 	strex	r3, r2, [r1]
 80022a2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80022a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1e5      	bne.n	8002276 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	3314      	adds	r3, #20
 80022b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022b4:	e853 3f00 	ldrex	r3, [r3]
 80022b8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80022ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022bc:	f023 0301 	bic.w	r3, r3, #1
 80022c0:	667b      	str	r3, [r7, #100]	@ 0x64
 80022c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	3314      	adds	r3, #20
 80022c8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80022ca:	647a      	str	r2, [r7, #68]	@ 0x44
 80022cc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022ce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80022d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80022d2:	e841 2300 	strex	r3, r2, [r1]
 80022d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80022d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1e5      	bne.n	80022aa <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80022de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	3314      	adds	r3, #20
 80022e4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e8:	e853 3f00 	ldrex	r3, [r3]
 80022ec:	623b      	str	r3, [r7, #32]
   return(result);
 80022ee:	6a3b      	ldr	r3, [r7, #32]
 80022f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80022f4:	663b      	str	r3, [r7, #96]	@ 0x60
 80022f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	3314      	adds	r3, #20
 80022fc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80022fe:	633a      	str	r2, [r7, #48]	@ 0x30
 8002300:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002302:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002304:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002306:	e841 2300 	strex	r3, r2, [r1]
 800230a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800230c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800230e:	2b00      	cmp	r3, #0
 8002310:	d1e5      	bne.n	80022de <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002312:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002314:	2220      	movs	r2, #32
 8002316:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800231a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800231c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800231e:	2b01      	cmp	r3, #1
 8002320:	d119      	bne.n	8002356 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002322:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	330c      	adds	r3, #12
 8002328:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	e853 3f00 	ldrex	r3, [r3]
 8002330:	60fb      	str	r3, [r7, #12]
   return(result);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f023 0310 	bic.w	r3, r3, #16
 8002338:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800233a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	330c      	adds	r3, #12
 8002340:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002342:	61fa      	str	r2, [r7, #28]
 8002344:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002346:	69b9      	ldr	r1, [r7, #24]
 8002348:	69fa      	ldr	r2, [r7, #28]
 800234a:	e841 2300 	strex	r3, r2, [r1]
 800234e:	617b      	str	r3, [r7, #20]
   return(result);
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d1e5      	bne.n	8002322 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002356:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002358:	2200      	movs	r2, #0
 800235a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800235c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800235e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002360:	2b01      	cmp	r3, #1
 8002362:	d107      	bne.n	8002374 <UART_DMAReceiveCplt+0x120>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8002364:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002366:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002368:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800236a:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
 800236c:	4611      	mov	r1, r2
 800236e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8002370:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002372:	e003      	b.n	800237c <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 8002374:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002376:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002378:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800237a:	4798      	blx	r3
}
 800237c:	bf00      	nop
 800237e:	3770      	adds	r7, #112	@ 0x70
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002390:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2201      	movs	r2, #1
 8002396:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239c:	2b01      	cmp	r3, #1
 800239e:	d109      	bne.n	80023b4 <UART_DMARxHalfCplt+0x30>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023a4:	68fa      	ldr	r2, [r7, #12]
 80023a6:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
 80023a8:	0852      	lsrs	r2, r2, #1
 80023aa:	b292      	uxth	r2, r2
 80023ac:	4611      	mov	r1, r2
 80023ae:	68f8      	ldr	r0, [r7, #12]
 80023b0:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80023b2:	e003      	b.n	80023bc <UART_DMARxHalfCplt+0x38>
    huart->RxHalfCpltCallback(huart);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023b8:	68f8      	ldr	r0, [r7, #12]
 80023ba:	4798      	blx	r3
}
 80023bc:	bf00      	nop
 80023be:	3710      	adds	r7, #16
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80023cc:	2300      	movs	r3, #0
 80023ce:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	695b      	ldr	r3, [r3, #20]
 80023dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	bf14      	ite	ne
 80023e4:	2301      	movne	r3, #1
 80023e6:	2300      	moveq	r3, #0
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	2b21      	cmp	r3, #33	@ 0x21
 80023f6:	d108      	bne.n	800240a <UART_DMAError+0x46>
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d005      	beq.n	800240a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	2200      	movs	r2, #0
 8002402:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8002404:	68b8      	ldr	r0, [r7, #8]
 8002406:	f000 f931 	bl	800266c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	695b      	ldr	r3, [r3, #20]
 8002410:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002414:	2b00      	cmp	r3, #0
 8002416:	bf14      	ite	ne
 8002418:	2301      	movne	r3, #1
 800241a:	2300      	moveq	r3, #0
 800241c:	b2db      	uxtb	r3, r3
 800241e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002426:	b2db      	uxtb	r3, r3
 8002428:	2b22      	cmp	r3, #34	@ 0x22
 800242a:	d108      	bne.n	800243e <UART_DMAError+0x7a>
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d005      	beq.n	800243e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	2200      	movs	r2, #0
 8002436:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8002438:	68b8      	ldr	r0, [r7, #8]
 800243a:	f000 f93e 	bl	80026ba <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002442:	f043 0210 	orr.w	r2, r3, #16
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800244e:	68b8      	ldr	r0, [r7, #8]
 8002450:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002452:	bf00      	nop
 8002454:	3710      	adds	r7, #16
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800245a:	b580      	push	{r7, lr}
 800245c:	b090      	sub	sp, #64	@ 0x40
 800245e:	af00      	add	r7, sp, #0
 8002460:	60f8      	str	r0, [r7, #12]
 8002462:	60b9      	str	r1, [r7, #8]
 8002464:	603b      	str	r3, [r7, #0]
 8002466:	4613      	mov	r3, r2
 8002468:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800246a:	e050      	b.n	800250e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800246c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800246e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002472:	d04c      	beq.n	800250e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002474:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002476:	2b00      	cmp	r3, #0
 8002478:	d007      	beq.n	800248a <UART_WaitOnFlagUntilTimeout+0x30>
 800247a:	f7fe f8ff 	bl	800067c <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002486:	429a      	cmp	r2, r3
 8002488:	d241      	bcs.n	800250e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	330c      	adds	r3, #12
 8002490:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002494:	e853 3f00 	ldrex	r3, [r3]
 8002498:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800249a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800249c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80024a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	330c      	adds	r3, #12
 80024a8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80024aa:	637a      	str	r2, [r7, #52]	@ 0x34
 80024ac:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024ae:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80024b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80024b2:	e841 2300 	strex	r3, r2, [r1]
 80024b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80024b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1e5      	bne.n	800248a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	3314      	adds	r3, #20
 80024c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	e853 3f00 	ldrex	r3, [r3]
 80024cc:	613b      	str	r3, [r7, #16]
   return(result);
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	f023 0301 	bic.w	r3, r3, #1
 80024d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	3314      	adds	r3, #20
 80024dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80024de:	623a      	str	r2, [r7, #32]
 80024e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024e2:	69f9      	ldr	r1, [r7, #28]
 80024e4:	6a3a      	ldr	r2, [r7, #32]
 80024e6:	e841 2300 	strex	r3, r2, [r1]
 80024ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d1e5      	bne.n	80024be <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2220      	movs	r2, #32
 80024f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2220      	movs	r2, #32
 80024fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e00f      	b.n	800252e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	4013      	ands	r3, r2
 8002518:	68ba      	ldr	r2, [r7, #8]
 800251a:	429a      	cmp	r2, r3
 800251c:	bf0c      	ite	eq
 800251e:	2301      	moveq	r3, #1
 8002520:	2300      	movne	r3, #0
 8002522:	b2db      	uxtb	r3, r3
 8002524:	461a      	mov	r2, r3
 8002526:	79fb      	ldrb	r3, [r7, #7]
 8002528:	429a      	cmp	r2, r3
 800252a:	d09f      	beq.n	800246c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3740      	adds	r7, #64	@ 0x40
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
	...

08002538 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b098      	sub	sp, #96	@ 0x60
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	4613      	mov	r3, r2
 8002544:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8002546:	68ba      	ldr	r2, [r7, #8]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	88fa      	ldrh	r2, [r7, #6]
 8002550:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2200      	movs	r2, #0
 8002556:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2222      	movs	r2, #34	@ 0x22
 800255c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002564:	4a3e      	ldr	r2, [pc, #248]	@ (8002660 <UART_Start_Receive_DMA+0x128>)
 8002566:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800256c:	4a3d      	ldr	r2, [pc, #244]	@ (8002664 <UART_Start_Receive_DMA+0x12c>)
 800256e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002574:	4a3c      	ldr	r2, [pc, #240]	@ (8002668 <UART_Start_Receive_DMA+0x130>)
 8002576:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800257c:	2200      	movs	r2, #0
 800257e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002580:	f107 0308 	add.w	r3, r7, #8
 8002584:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	3304      	adds	r3, #4
 8002590:	4619      	mov	r1, r3
 8002592:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	88fb      	ldrh	r3, [r7, #6]
 8002598:	f7fe fa06 	bl	80009a8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800259c:	2300      	movs	r3, #0
 800259e:	613b      	str	r3, [r7, #16]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	613b      	str	r3, [r7, #16]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	613b      	str	r3, [r7, #16]
 80025b0:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d019      	beq.n	80025ee <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	330c      	adds	r3, #12
 80025c0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025c4:	e853 3f00 	ldrex	r3, [r3]
 80025c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80025ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025d0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	330c      	adds	r3, #12
 80025d8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80025da:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80025dc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025de:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80025e0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80025e2:	e841 2300 	strex	r3, r2, [r1]
 80025e6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80025e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1e5      	bne.n	80025ba <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	3314      	adds	r3, #20
 80025f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025f8:	e853 3f00 	ldrex	r3, [r3]
 80025fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80025fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002600:	f043 0301 	orr.w	r3, r3, #1
 8002604:	657b      	str	r3, [r7, #84]	@ 0x54
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	3314      	adds	r3, #20
 800260c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800260e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002610:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002612:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002614:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002616:	e841 2300 	strex	r3, r2, [r1]
 800261a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800261c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800261e:	2b00      	cmp	r3, #0
 8002620:	d1e5      	bne.n	80025ee <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	3314      	adds	r3, #20
 8002628:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	e853 3f00 	ldrex	r3, [r3]
 8002630:	617b      	str	r3, [r7, #20]
   return(result);
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002638:	653b      	str	r3, [r7, #80]	@ 0x50
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	3314      	adds	r3, #20
 8002640:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002642:	627a      	str	r2, [r7, #36]	@ 0x24
 8002644:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002646:	6a39      	ldr	r1, [r7, #32]
 8002648:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800264a:	e841 2300 	strex	r3, r2, [r1]
 800264e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1e5      	bne.n	8002622 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8002656:	2300      	movs	r3, #0
}
 8002658:	4618      	mov	r0, r3
 800265a:	3760      	adds	r7, #96	@ 0x60
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	08002255 	.word	0x08002255
 8002664:	08002385 	.word	0x08002385
 8002668:	080023c5 	.word	0x080023c5

0800266c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800266c:	b480      	push	{r7}
 800266e:	b089      	sub	sp, #36	@ 0x24
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	330c      	adds	r3, #12
 800267a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	e853 3f00 	ldrex	r3, [r3]
 8002682:	60bb      	str	r3, [r7, #8]
   return(result);
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800268a:	61fb      	str	r3, [r7, #28]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	330c      	adds	r3, #12
 8002692:	69fa      	ldr	r2, [r7, #28]
 8002694:	61ba      	str	r2, [r7, #24]
 8002696:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002698:	6979      	ldr	r1, [r7, #20]
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	e841 2300 	strex	r3, r2, [r1]
 80026a0:	613b      	str	r3, [r7, #16]
   return(result);
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d1e5      	bne.n	8002674 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2220      	movs	r2, #32
 80026ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80026b0:	bf00      	nop
 80026b2:	3724      	adds	r7, #36	@ 0x24
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bc80      	pop	{r7}
 80026b8:	4770      	bx	lr

080026ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80026ba:	b480      	push	{r7}
 80026bc:	b095      	sub	sp, #84	@ 0x54
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	330c      	adds	r3, #12
 80026c8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026cc:	e853 3f00 	ldrex	r3, [r3]
 80026d0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80026d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80026d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	330c      	adds	r3, #12
 80026e0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80026e2:	643a      	str	r2, [r7, #64]	@ 0x40
 80026e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026e6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80026e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80026ea:	e841 2300 	strex	r3, r2, [r1]
 80026ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80026f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d1e5      	bne.n	80026c2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	3314      	adds	r3, #20
 80026fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026fe:	6a3b      	ldr	r3, [r7, #32]
 8002700:	e853 3f00 	ldrex	r3, [r3]
 8002704:	61fb      	str	r3, [r7, #28]
   return(result);
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	f023 0301 	bic.w	r3, r3, #1
 800270c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	3314      	adds	r3, #20
 8002714:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002716:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002718:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800271a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800271c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800271e:	e841 2300 	strex	r3, r2, [r1]
 8002722:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002726:	2b00      	cmp	r3, #0
 8002728:	d1e5      	bne.n	80026f6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800272e:	2b01      	cmp	r3, #1
 8002730:	d119      	bne.n	8002766 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	330c      	adds	r3, #12
 8002738:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	e853 3f00 	ldrex	r3, [r3]
 8002740:	60bb      	str	r3, [r7, #8]
   return(result);
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	f023 0310 	bic.w	r3, r3, #16
 8002748:	647b      	str	r3, [r7, #68]	@ 0x44
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	330c      	adds	r3, #12
 8002750:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002752:	61ba      	str	r2, [r7, #24]
 8002754:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002756:	6979      	ldr	r1, [r7, #20]
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	e841 2300 	strex	r3, r2, [r1]
 800275e:	613b      	str	r3, [r7, #16]
   return(result);
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d1e5      	bne.n	8002732 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2220      	movs	r2, #32
 800276a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002774:	bf00      	nop
 8002776:	3754      	adds	r7, #84	@ 0x54
 8002778:	46bd      	mov	sp, r7
 800277a:	bc80      	pop	{r7}
 800277c:	4770      	bx	lr

0800277e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800277e:	b580      	push	{r7, lr}
 8002780:	b084      	sub	sp, #16
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800278a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2200      	movs	r2, #0
 8002790:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2200      	movs	r2, #0
 8002796:	84da      	strh	r2, [r3, #38]	@ 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800279c:	68f8      	ldr	r0, [r7, #12]
 800279e:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80027a0:	bf00      	nop
 80027a2:	3710      	adds	r7, #16
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	2b21      	cmp	r3, #33	@ 0x21
 80027ba:	d13e      	bne.n	800283a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027c4:	d114      	bne.n	80027f0 <UART_Transmit_IT+0x48>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d110      	bne.n	80027f0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a1b      	ldr	r3, [r3, #32]
 80027d2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	881b      	ldrh	r3, [r3, #0]
 80027d8:	461a      	mov	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027e2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a1b      	ldr	r3, [r3, #32]
 80027e8:	1c9a      	adds	r2, r3, #2
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	621a      	str	r2, [r3, #32]
 80027ee:	e008      	b.n	8002802 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a1b      	ldr	r3, [r3, #32]
 80027f4:	1c59      	adds	r1, r3, #1
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	6211      	str	r1, [r2, #32]
 80027fa:	781a      	ldrb	r2, [r3, #0]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002806:	b29b      	uxth	r3, r3
 8002808:	3b01      	subs	r3, #1
 800280a:	b29b      	uxth	r3, r3
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	4619      	mov	r1, r3
 8002810:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002812:	2b00      	cmp	r3, #0
 8002814:	d10f      	bne.n	8002836 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68da      	ldr	r2, [r3, #12]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002824:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68da      	ldr	r2, [r3, #12]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002834:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002836:	2300      	movs	r3, #0
 8002838:	e000      	b.n	800283c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800283a:	2302      	movs	r3, #2
  }
}
 800283c:	4618      	mov	r0, r3
 800283e:	3714      	adds	r7, #20
 8002840:	46bd      	mov	sp, r7
 8002842:	bc80      	pop	{r7}
 8002844:	4770      	bx	lr

08002846 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002846:	b580      	push	{r7, lr}
 8002848:	b082      	sub	sp, #8
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	68da      	ldr	r2, [r3, #12]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800285c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2220      	movs	r2, #32
 8002862:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800286e:	2300      	movs	r3, #0
}
 8002870:	4618      	mov	r0, r3
 8002872:	3708      	adds	r7, #8
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b08c      	sub	sp, #48	@ 0x30
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002886:	b2db      	uxtb	r3, r3
 8002888:	2b22      	cmp	r3, #34	@ 0x22
 800288a:	f040 80b0 	bne.w	80029ee <UART_Receive_IT+0x176>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002896:	d117      	bne.n	80028c8 <UART_Receive_IT+0x50>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	691b      	ldr	r3, [r3, #16]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d113      	bne.n	80028c8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80028a0:	2300      	movs	r3, #0
 80028a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028a8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028b6:	b29a      	uxth	r2, r3
 80028b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028ba:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028c0:	1c9a      	adds	r2, r3, #2
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	629a      	str	r2, [r3, #40]	@ 0x28
 80028c6:	e026      	b.n	8002916 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80028ce:	2300      	movs	r3, #0
 80028d0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028da:	d007      	beq.n	80028ec <UART_Receive_IT+0x74>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d10a      	bne.n	80028fa <UART_Receive_IT+0x82>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d106      	bne.n	80028fa <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	b2da      	uxtb	r2, r3
 80028f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028f6:	701a      	strb	r2, [r3, #0]
 80028f8:	e008      	b.n	800290c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	b2db      	uxtb	r3, r3
 8002902:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002906:	b2da      	uxtb	r2, r3
 8002908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800290a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002910:	1c5a      	adds	r2, r3, #1
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800291a:	b29b      	uxth	r3, r3
 800291c:	3b01      	subs	r3, #1
 800291e:	b29b      	uxth	r3, r3
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	4619      	mov	r1, r3
 8002924:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002926:	2b00      	cmp	r3, #0
 8002928:	d15f      	bne.n	80029ea <UART_Receive_IT+0x172>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68da      	ldr	r2, [r3, #12]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f022 0220 	bic.w	r2, r2, #32
 8002938:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68da      	ldr	r2, [r3, #12]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002948:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	695a      	ldr	r2, [r3, #20]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f022 0201 	bic.w	r2, r2, #1
 8002958:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2220      	movs	r2, #32
 800295e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800296c:	2b01      	cmp	r3, #1
 800296e:	d136      	bne.n	80029de <UART_Receive_IT+0x166>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	330c      	adds	r3, #12
 800297c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	e853 3f00 	ldrex	r3, [r3]
 8002984:	613b      	str	r3, [r7, #16]
   return(result);
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	f023 0310 	bic.w	r3, r3, #16
 800298c:	627b      	str	r3, [r7, #36]	@ 0x24
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	330c      	adds	r3, #12
 8002994:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002996:	623a      	str	r2, [r7, #32]
 8002998:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800299a:	69f9      	ldr	r1, [r7, #28]
 800299c:	6a3a      	ldr	r2, [r7, #32]
 800299e:	e841 2300 	strex	r3, r2, [r1]
 80029a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d1e5      	bne.n	8002976 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0310 	and.w	r3, r3, #16
 80029b4:	2b10      	cmp	r3, #16
 80029b6:	d10a      	bne.n	80029ce <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80029b8:	2300      	movs	r3, #0
 80029ba:	60fb      	str	r3, [r7, #12]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	60fb      	str	r3, [r7, #12]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	60fb      	str	r3, [r7, #12]
 80029cc:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
 80029d6:	4611      	mov	r1, r2
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	4798      	blx	r3
 80029dc:	e003      	b.n	80029e6 <UART_Receive_IT+0x16e>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80029e6:	2300      	movs	r3, #0
 80029e8:	e002      	b.n	80029f0 <UART_Receive_IT+0x178>
    }
    return HAL_OK;
 80029ea:	2300      	movs	r3, #0
 80029ec:	e000      	b.n	80029f0 <UART_Receive_IT+0x178>
  }
  else
  {
    return HAL_BUSY;
 80029ee:	2302      	movs	r3, #2
  }
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3730      	adds	r7, #48	@ 0x30
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	68da      	ldr	r2, [r3, #12]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	430a      	orrs	r2, r1
 8002a14:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	689a      	ldr	r2, [r3, #8]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	431a      	orrs	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	695b      	ldr	r3, [r3, #20]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002a32:	f023 030c 	bic.w	r3, r3, #12
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	6812      	ldr	r2, [r2, #0]
 8002a3a:	68b9      	ldr	r1, [r7, #8]
 8002a3c:	430b      	orrs	r3, r1
 8002a3e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	695b      	ldr	r3, [r3, #20]
 8002a46:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	699a      	ldr	r2, [r3, #24]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	430a      	orrs	r2, r1
 8002a54:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a2c      	ldr	r2, [pc, #176]	@ (8002b0c <UART_SetConfig+0x114>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d103      	bne.n	8002a68 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002a60:	f7fe ff66 	bl	8001930 <HAL_RCC_GetPCLK2Freq>
 8002a64:	60f8      	str	r0, [r7, #12]
 8002a66:	e002      	b.n	8002a6e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002a68:	f7fe ff4e 	bl	8001908 <HAL_RCC_GetPCLK1Freq>
 8002a6c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	4613      	mov	r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	4413      	add	r3, r2
 8002a76:	009a      	lsls	r2, r3, #2
 8002a78:	441a      	add	r2, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a84:	4a22      	ldr	r2, [pc, #136]	@ (8002b10 <UART_SetConfig+0x118>)
 8002a86:	fba2 2303 	umull	r2, r3, r2, r3
 8002a8a:	095b      	lsrs	r3, r3, #5
 8002a8c:	0119      	lsls	r1, r3, #4
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	4613      	mov	r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	4413      	add	r3, r2
 8002a96:	009a      	lsls	r2, r3, #2
 8002a98:	441a      	add	r2, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002aa4:	4b1a      	ldr	r3, [pc, #104]	@ (8002b10 <UART_SetConfig+0x118>)
 8002aa6:	fba3 0302 	umull	r0, r3, r3, r2
 8002aaa:	095b      	lsrs	r3, r3, #5
 8002aac:	2064      	movs	r0, #100	@ 0x64
 8002aae:	fb00 f303 	mul.w	r3, r0, r3
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	011b      	lsls	r3, r3, #4
 8002ab6:	3332      	adds	r3, #50	@ 0x32
 8002ab8:	4a15      	ldr	r2, [pc, #84]	@ (8002b10 <UART_SetConfig+0x118>)
 8002aba:	fba2 2303 	umull	r2, r3, r2, r3
 8002abe:	095b      	lsrs	r3, r3, #5
 8002ac0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ac4:	4419      	add	r1, r3
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	4413      	add	r3, r2
 8002ace:	009a      	lsls	r2, r3, #2
 8002ad0:	441a      	add	r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002adc:	4b0c      	ldr	r3, [pc, #48]	@ (8002b10 <UART_SetConfig+0x118>)
 8002ade:	fba3 0302 	umull	r0, r3, r3, r2
 8002ae2:	095b      	lsrs	r3, r3, #5
 8002ae4:	2064      	movs	r0, #100	@ 0x64
 8002ae6:	fb00 f303 	mul.w	r3, r0, r3
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	011b      	lsls	r3, r3, #4
 8002aee:	3332      	adds	r3, #50	@ 0x32
 8002af0:	4a07      	ldr	r2, [pc, #28]	@ (8002b10 <UART_SetConfig+0x118>)
 8002af2:	fba2 2303 	umull	r2, r3, r2, r3
 8002af6:	095b      	lsrs	r3, r3, #5
 8002af8:	f003 020f 	and.w	r2, r3, #15
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	440a      	add	r2, r1
 8002b02:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002b04:	bf00      	nop
 8002b06:	3710      	adds	r7, #16
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	40013800 	.word	0x40013800
 8002b10:	51eb851f 	.word	0x51eb851f

08002b14 <memset>:
 8002b14:	4603      	mov	r3, r0
 8002b16:	4402      	add	r2, r0
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d100      	bne.n	8002b1e <memset+0xa>
 8002b1c:	4770      	bx	lr
 8002b1e:	f803 1b01 	strb.w	r1, [r3], #1
 8002b22:	e7f9      	b.n	8002b18 <memset+0x4>

08002b24 <__libc_init_array>:
 8002b24:	b570      	push	{r4, r5, r6, lr}
 8002b26:	2600      	movs	r6, #0
 8002b28:	4d0c      	ldr	r5, [pc, #48]	@ (8002b5c <__libc_init_array+0x38>)
 8002b2a:	4c0d      	ldr	r4, [pc, #52]	@ (8002b60 <__libc_init_array+0x3c>)
 8002b2c:	1b64      	subs	r4, r4, r5
 8002b2e:	10a4      	asrs	r4, r4, #2
 8002b30:	42a6      	cmp	r6, r4
 8002b32:	d109      	bne.n	8002b48 <__libc_init_array+0x24>
 8002b34:	f000 f81a 	bl	8002b6c <_init>
 8002b38:	2600      	movs	r6, #0
 8002b3a:	4d0a      	ldr	r5, [pc, #40]	@ (8002b64 <__libc_init_array+0x40>)
 8002b3c:	4c0a      	ldr	r4, [pc, #40]	@ (8002b68 <__libc_init_array+0x44>)
 8002b3e:	1b64      	subs	r4, r4, r5
 8002b40:	10a4      	asrs	r4, r4, #2
 8002b42:	42a6      	cmp	r6, r4
 8002b44:	d105      	bne.n	8002b52 <__libc_init_array+0x2e>
 8002b46:	bd70      	pop	{r4, r5, r6, pc}
 8002b48:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b4c:	4798      	blx	r3
 8002b4e:	3601      	adds	r6, #1
 8002b50:	e7ee      	b.n	8002b30 <__libc_init_array+0xc>
 8002b52:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b56:	4798      	blx	r3
 8002b58:	3601      	adds	r6, #1
 8002b5a:	e7f2      	b.n	8002b42 <__libc_init_array+0x1e>
 8002b5c:	08002bf0 	.word	0x08002bf0
 8002b60:	08002bf0 	.word	0x08002bf0
 8002b64:	08002bf0 	.word	0x08002bf0
 8002b68:	08002bf4 	.word	0x08002bf4

08002b6c <_init>:
 8002b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b6e:	bf00      	nop
 8002b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b72:	bc08      	pop	{r3}
 8002b74:	469e      	mov	lr, r3
 8002b76:	4770      	bx	lr

08002b78 <_fini>:
 8002b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b7a:	bf00      	nop
 8002b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b7e:	bc08      	pop	{r3}
 8002b80:	469e      	mov	lr, r3
 8002b82:	4770      	bx	lr
